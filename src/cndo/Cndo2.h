#ifndef INCLUDED_CNDO
#define INCLUDED_CNDO

using namespace std;
using namespace MolDS_base;
using namespace MolDS_base_atoms;

namespace MolDS_cndo{

/***
 *  Refferences for Cndo2 are [PB_1970], [PSS_1965], and [PS_1965].
 */
class Cndo2{
public:
   Cndo2();
   ~Cndo2();
   TheoryType GetTheoryType();
   void SetMolecule(Molecule* molecule);
   Molecule* GetMolecule();
   void DoesSCF();
   void DoesSCF(bool requiresGuess);
   virtual void DoesCIS();
   double** GetForce(int electronicStateIndex);
   double GetElectronicEnergy();
   double GetCoreRepulsionEnergy();
protected:
   string errorMessageAtomA;
   string errorMessageAtomB;
   string errorMessageAtomType;
   string errorMessageOrbitalType;
   string errorMessageSCFNotConverged;
   string errorMessageMoleculeNotSet;
   string errorMessageOddTotalValenceElectrions;
   string errorMessageNotEnebleAtomType;
   string errorMessageCoulombInt;
   string errorMessageExchangeInt;
   string errorMessageMolecularIntegralElement;
   string errorMessageGetGaussianOverlapOrbitalD;
   string errorMessageGetGaussianOverlapFirstDerivativeOrbitalD;
   string errorMessageCISNotImplemented;
   string errorMessageCalcForceNotImplemented;
   string messageSCFMetConvergence;
   string messageStartSCF;
   string messageDoneSCF;
   string messageOmpElapsedTimeSCF;
   string messageUnitSec; 
   vector<AtomType> enableAtomTypes;
   double coreRepulsionEnergy;
   virtual void CalcCoreRepulsionEnergy();
   virtual double GetDiatomCoreRepulsionFirstDerivative(int indexAtomA, 
                                                        int indexAtomB, 
                                                        CartesianType axisA);
   double** orbitalElectronPopulation; //P_{\mu\nu} of (2.50) in J. A. Pople book.
   double*   atomicElectronPopulation; //P_{AB} of (3.21) in J. A. Pople book.
   double GetReducedOverlap(int na, int la, int m, int nb, int lb, double alpha, double beta);
   double GetReducedOverlap(int na, int nb, double alpha, double beta);
   double GetReducedOverlapFirstDerivativeAlpha
              (int na, int la, int m, int nb, int lb, double alpha, double beta);
   double GetReducedOverlapFirstDerivativeBeta
              (int na, int la, int m, int nb, int lb, double alpha, double beta);
   double GetOverlapElementFirstDerivativeByGTOExpansion
              (Atom* atomA, int valenceIndexA, Atom* atomB, int valenceIndexB,
               STOnGType stonG, CartesianType axisA); // See [DY_1977].
   virtual void CalcGammaAB(double** gammaAB, Molecule* molecule);
   virtual void SetMessages();
   virtual void SetEnableAtomTypes();
   virtual double GetFockDiagElement(Atom* atomA, int atomAIndex, 
                             int mu, Molecule* molecule, double** gammaAB,
                             double** orbitalElectronPopulation, double* atomicElectronPopulation,
                             bool isGuess);
   virtual double GetFockOffDiagElement(Atom* atomA, Atom* atomB, int atomAIndex, int atomBIndex, 
                                int mu, int nu, Molecule* molecule, double** gammaAB, double** overlap,
                                double** orbitalElectronPopulation, bool isGuess);
   virtual void CalcDiatomicOverlapInDiatomicFrame(double** diatomicOverlap, Atom* atomA, Atom* atomB);
   virtual void CalcDiatomicOverlapFirstDerivativeInDiatomicFrame(
                                                double** diatomicOverlapDeri, 
                                                Atom* atomA, Atom* atomB);
   void CalcDiatomicOverlapFirstDerivative(double*** overlapFirstDeri, 
                                               Atom* atomA, Atom* atomB);
   void FreeDiatomicOverlapDeriTemps(double*** diatomicOverlap, 
                                     double*** rotatingMatrix,
                                     double*** diaOverlapDeriR,
                                     double**** rMatDeri);
   virtual double GetMolecularIntegralElement(int moI, int moJ, int moK, int moL, 
                                              Molecule* molecule, double** fockMatrix, double** gammaAB);
   virtual void CalcForce(int electronicStateIndex);
   TheoryType theory;
   Molecule* molecule;
   double** fockMatrix;
   double* energiesMO;
   double** matrixForce;
private:
   string messageEnergiesMOs;
   string messageEnergiesMOsTitle;
   string messageMullikenAtoms;
   string messageMullikenAtomsTitle;
   string messageElecEnergy;
   string messageElecEnergyTitle;
   string messageOcc;
   string messageUnOcc;
   string messageCoreRepulsionTitle;
   string messageCoreRepulsion;
   double elecEnergy;
   double** gammaAB;
   double** overlap;

   // use Y[na][nb][la][lb][m][i][j] 
   // as Y_{ij\lammda} in (B.20) in Pople book for give na, nb, la, lb, m, i, and j.
   static const double Y[ShellType_end+1][ShellType_end+1][ShellType_end][ShellType_end][ShellType_end][2*ShellType_end+1][2*ShellType_end+1];
   // use Z[na][nb][k] as Z_{k} in (B.30) in Pople book for give na, nb, and k. 
   static const double Z[2*ShellType_end][2*ShellType_end][4*ShellType_end-1];

   bool SatisfyConvergenceCriterion(double** oldOrbitalElectronPopulation, 
                                    double** orbitalElectronPopulation,
                                    int numberAOs, double* rmsDensity, int times);
   void UpdateOldOrbitalElectronPopulation(double** oldOrbitalElectronPopulation, 
                                           double** orbitalElectronPopulation,
                                           int numberAOs);
   void CalcOrbitalElectronPopulation(double** orbitalElectronPopulation, 
                                      Molecule* molecule, double** fockMatrix);
   void CalcAtomicElectronPopulation(double* atomicElectronPopulation,
                                     double** orbitalElectronPopulation, 
                                     Molecule* molecule);
   void CalcOverlap(double** overlap, Molecule* molecule);
   void CalcOverlapByGTOExpansion(double** overlap, 
                                  Molecule* molecule, 
                                  STOnGType stonG); //See [DY_1977]
   double GetOverlapElementByGTOExpansion(Atom* atomA, int valenceIndexA, 
                                          Atom* atomB, int valenceIndexB,
                                          STOnGType stonG); // see [DY_1977]
   double GetGaussianOverlap(AtomType atomTypeA, 
                             OrbitalType valenceOrbitalA, 
                             double gaussianExponentA, 
                             AtomType atomTypeB, 
                             OrbitalType valenceOrbitalB, 
                             double gaussianExponentB, 
                             double dx, double dy, double dz, double Rab); // see [DY_1977]
   double GetGaussianOverlapSaSb(double gaussianExponentA, 
                                 double gaussianExponentB, 
                                 double Rab); // see [DY_1977]
   double GetGaussianOverlapFirstDerivative(AtomType atomTypeA, 
                             OrbitalType valenceOrbitalA, 
                             double gaussianExponentA, 
                             AtomType atomTypeB, 
                             OrbitalType valenceOrbitalB, 
                             double gaussianExponentB, 
                             double dx, double dy, double dz, 
                             double Rab, CartesianType axisA);// see [DY_1977]
   void CalcRotatingMatrix(double** rotatingMatrix, Atom* atomA, Atom* atomB);
   void CalcRotatingMatrixFirstDerivative(double*** rMatFirstDeri, 
                                          Atom* atomA,
                                          Atom* atomB);
   void CalcFockMatrix(double** fockMatrix, Molecule* molecule, 
                       double** overlap, double** gammaAB,
                       double** orbitalElectronPopulation, 
                       double* atomicElectronPopulation,
                       bool isGuess);
   void RotateDiatmicOverlapToSpaceFrame(double** diatomicOverlap, 
                                         double** rotatingMatrix);
   void SetOverlapElement(double** overlap, double** diatomicOverlap, 
                          Atom* atomA, Atom* atomB);
   double GetAuxiliaryA(int k, double rho);
   double GetAuxiliaryB(int k, double rho);
   double GetAuxiliaryD(int la, int lb, int m);
   double GetAuxiliaryAFirstDerivative(int k, double rho);
   double GetAuxiliaryBFirstDerivative(int k, double rho);
   void DoesDamp(double rmsDensity, 
                 double** orbitalElectronPopulation, 
                 double** oldOrbitalElectronPopulation, 
                 Molecule* molecule);
   void DoesDIIS(double** orbitalElectronPopulation,
                 double** oldOrbitalElectronPopulation,
                 double*** diisStoredDensityMatrix,
                 double*** diisStoredErrorVect,
                 double** diisErrorProducts,
                 double* diisErrorCoefficients,
                 int diisNumErrorVect,
                 Molecule* molecule, 
                 int step);
   void OutputResults(double** fockMatrix, double* energiesMO, 
                      double* atomicElectronPopulation, Molecule* molecule);
   void CheckEnableAtomType(Molecule* molecule);
   void CheckNumberValenceElectrons(Molecule* molecule);
   void FreeDiatomicOverlapAndRotatingMatrix(double*** diatomicOverlap, 
                                             double*** rotatingMatrix);
   void CalcElecEnergy(double* elecEnergy, Molecule* molecule, double* energiesMO, 
                         double** fockMatrix, double** gammaAB, double coreRepulsionEnergy);
   void FreeElecEnergyMatrices(double*** fMatrix, 
                                double*** hMatrix, 
                                double*** dammyOrbitalElectronPopulation, 
                                double**  dammyAtomicElectronPopulation );
   void FreeSCFTemporaryMatrices(double*** oldOrbitalElectronPopulation,
                                 double**** diisStoredDensityMatrix,
                                 double**** diisStoredErrorVect,
                                 double*** diisErrorProducts,
                                 double** diisErrorCoefficients);

};

Cndo2::Cndo2(){
   this->theory = CNDO2;
   this->SetMessages();
   this->SetEnableAtomTypes();
   this->gammaAB = NULL;
   this->overlap = NULL;
   this->orbitalElectronPopulation = NULL;
   this->atomicElectronPopulation = NULL;
   this->fockMatrix = NULL;
   this->energiesMO = NULL;
   this->molecule = NULL;
   this->elecEnergy = 0.0;
   this->coreRepulsionEnergy = 0.0;
   //cout << "Cndo created\n";
}

Cndo2::~Cndo2(){
   if(this->gammaAB != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (&this->gammaAB, this->molecule->GetAtomVect()->size());
      //cout << "gammaAB deleted\n";
   }
   if(this->overlap != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (&this->overlap, this->molecule->GetTotalNumberAOs());
      //cout << "overlap deleted\n";
   }
   if(this->orbitalElectronPopulation != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (&this->orbitalElectronPopulation, this->molecule->GetTotalNumberAOs());
      //cout << "orbitalElectronPopulation deleted\n";
   }
   if(this->atomicElectronPopulation != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix1d
      (&this->atomicElectronPopulation);
      //cout << "atiomiElectrionPopulation deleted\n";
   }
   if(this->fockMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (&this->fockMatrix, this->molecule->GetTotalNumberAOs());
      //cout << "fockMatrix deleted\n";
   }
   if(this->energiesMO != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix1d
      (&this->energiesMO);
      //cout << "energiesMO deleted\n";
   }
   //cout << "cndo deleted\n";
}

void Cndo2::SetMessages(){
   this->errorMessageSCFNotConverged 
      = "Error in cndo::Cndo2::DoesSCF: SCF did not met convergence criterion. maxIterationsSCF=";
   this->errorMessageMoleculeNotSet 
      = "Error in cndo::Cndo2::DoesSCF: A molecule is not set.\n";
   this->errorMessageOddTotalValenceElectrions 
      = "Error in cndo::Cndo2::SetMolecule: Total number of valence electrons is odd. totalNumberValenceElectrons=";
   this->errorMessageNotEnebleAtomType  
      = "Error in cndo::Cndo2::ChecEnableAtomType: Non available atom is contained.\n";
   this->errorMessageAtomA = "Atom A is:\n";
   this->errorMessageAtomB = "Atom B is:\n";
   this->errorMessageAtomType = "\tatom type = ";
   this->errorMessageOrbitalType = "\torbital type = ";
   this->errorMessageMolecularIntegralElement
      = "Error in cndo::Cndo2::GetMolecularIntegralElement: Non available orbital is contained.\n";
   this->errorMessageGetGaussianOverlapOrbitalD 
      = "Error in cndo::Cndo2::GetGaussiangOverlap: d-orbital is not treatable. The d-orbital is contained in atom A or B.\n";
   this->errorMessageGetGaussianOverlapFirstDerivativeOrbitalD 
      = "Error in cndo::Cndo2::GetGaussiangOverlapFirstDerivative: d-orbital is not treatable. The d-orbital is contained in atom A or B.\n";
   this->errorMessageCISNotImplemented 
      = "Error in cndo::Cndo2::DoesCIS: CIS is not implemented for CNDO2.\n";
   this->errorMessageCalcForceNotImplemented
      = "Error in cndo::Cndo2::CalcForce: Force is not available in CNDO2.\n";
   this->messageSCFMetConvergence = "\n\n\n\t\tCNDO/2-SCF met convergence criterion(^^b\n\n\n";
   this->messageStartSCF = "**********  START: CNDO/2-SCF  **********\n";
   this->messageDoneSCF = "**********  DONE: CNDO/2-SCF  **********\n\n\n";
   this->messageOmpElapsedTimeSCF = "\tElapsed time(omp) for the SCF = ";
   this->messageEnergiesMOs = "\tEnergies of MOs:\n";
   this->messageEnergiesMOsTitle = "\t\t| i-th | occ/unocc | e[a.u.] | e[eV] | \n";
   this->messageOcc = "occ";
   this->messageUnOcc = "unocc";
   this->messageMullikenAtoms = "\tMulliken charge on each Atom:\n";
   this->messageMullikenAtomsTitle = "\t\t| i-th | atom type | core charge | Mulliken charge | \n";
   this->messageElecEnergy = "\tElectronic energy(including core-repulsions):\n";
   this->messageElecEnergyTitle = "\t\t| [a.u.] | [eV] | \n";
   this->messageUnitSec = "[s].";
   this->messageCoreRepulsionTitle = "\t\t| [a.u.] | [eV] |\n";
   this->messageCoreRepulsion = "\tTotal core repulsion energy:\n";
}

void Cndo2::SetEnableAtomTypes(){
   this->enableAtomTypes.clear();
   this->enableAtomTypes.push_back(H);
   this->enableAtomTypes.push_back(Li);
   this->enableAtomTypes.push_back(Be);
   this->enableAtomTypes.push_back(B);
   this->enableAtomTypes.push_back(C);
   this->enableAtomTypes.push_back(N);
   this->enableAtomTypes.push_back(O);
   this->enableAtomTypes.push_back(F);
   this->enableAtomTypes.push_back(Na);
   this->enableAtomTypes.push_back(Mg);
   this->enableAtomTypes.push_back(Al);
   this->enableAtomTypes.push_back(Si);
   this->enableAtomTypes.push_back(P);
   this->enableAtomTypes.push_back(S);
   this->enableAtomTypes.push_back(Cl);
}

TheoryType Cndo2::GetTheoryType(){
   return this->theory;
}

void Cndo2::SetMolecule(Molecule* molecule){

   // check of number of valence electrons
   this->CheckNumberValenceElectrons(molecule);

   // check enable atom type
   this->CheckEnableAtomType(molecule);

   // set molecule and malloc
   this->molecule = molecule;
   if(this->theory == CNDO2 || this->theory == INDO){
      this->gammaAB = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                      (this->molecule->GetAtomVect()->size(), this->molecule->GetAtomVect()->size());
   }
   this->overlap = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                   (this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());
   this->orbitalElectronPopulation = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                   (this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());
   this->atomicElectronPopulation = MallocerFreer::GetInstance()->MallocDoubleMatrix1d
                   (this->molecule->GetAtomVect()->size());
   this->fockMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                   (this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());
   this->energiesMO = MallocerFreer::GetInstance()->MallocDoubleMatrix1d
                   (this->molecule->GetTotalNumberAOs());

   
}

Molecule* Cndo2::GetMolecule(){
   return this->molecule;
}

void Cndo2::CheckNumberValenceElectrons(Molecule* molecule){

   if(molecule->GetTotalNumberValenceElectrons() % 2 == 1){
      stringstream ss;
      ss << this->errorMessageOddTotalValenceElectrions << molecule->GetTotalNumberValenceElectrons() << "\n";
      throw MolDSException(ss.str());
   }
}

void Cndo2::CheckEnableAtomType(Molecule* molecule){

   for(int i=0; i<molecule->GetAtomVect()->size(); i++){
      AtomType atomType = (*molecule->GetAtomVect())[i]->GetAtomType();
      bool enable = false;
      for(int j=0; j<this->enableAtomTypes.size(); j++){
         if(atomType == this->enableAtomTypes[j]){
            enable = true;
            break;
         }
      }
      if(!enable){
         stringstream ss;
         ss << this->errorMessageNotEnebleAtomType;
         ss << this->errorMessageAtomType << AtomTypeStr(atomType) << endl;
         throw MolDSException(ss.str());
      }
   }
}

void Cndo2::CalcCoreRepulsionEnergy(){
   double energy = 0.0;
   double distance = 0.0;
   Atom* atomA = NULL;
   Atom* atomB = NULL;
   for(int i=0; i<this->molecule->GetAtomVect()->size(); i++){
      atomA = (*this->molecule->GetAtomVect())[i];
      for(int j=i+1; j<this->molecule->GetAtomVect()->size(); j++){
         atomB = (*this->molecule->GetAtomVect())[j];
         distance = this->molecule->GetDistanceAtoms(i, j);
         energy += atomA->GetCoreCharge()*atomB->GetCoreCharge()/distance; 
      }
   }
   this->coreRepulsionEnergy = energy;
}

// First derivative of the core repulsion related to the coordinate of atom A.
double Cndo2::GetDiatomCoreRepulsionFirstDerivative(int indexAtomA, int indexAtomB, 
                                                    CartesianType axisA){
   double value=0.0;
   Atom* atomA = (*this->molecule->GetAtomVect())[indexAtomA];
   Atom* atomB = (*this->molecule->GetAtomVect())[indexAtomB];
   double distance = this->molecule->GetDistanceAtoms(indexAtomA, indexAtomB);
   value = atomA->GetCoreCharge()*atomB->GetCoreCharge();
   value *= (atomA->GetXyz()[axisA] - atomB->GetXyz()[axisA])/distance;
   value *= -1.0/pow(distance,2.0);
   return value;
}

/*******
 *
 * Call Cndo2::SetMolecule(Molecule* molecule) at least once, 
 * before this function is called.
 *
 *****/
void Cndo2::DoesSCF(bool requiresGuess){

   cout << this->messageStartSCF;
   double ompStartTime = omp_get_wtime();

   if(this->molecule == NULL){
      stringstream ss;
      ss << this->errorMessageMoleculeNotSet;
      throw MolDSException(ss.str());
   }

   // diis parameters
   int diisNumErrorVect = Parameters::GetInstance()->GetDiisNumErrorVectSCF();


   // malloc temporary matrices for scf
   double** oldOrbitalElectronPopulation = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
            (this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());

   // malloc temporary matrices for diis
   double*** diisStoredDensityMatrix = NULL;
   double*** diisStoredErrorVect = NULL;
   double** diisErrorProducts = NULL;
   double* diisErrorCoefficients = NULL;
   if(0<diisNumErrorVect){
      diisStoredDensityMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix3d
                (diisNumErrorVect, this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());
      diisStoredErrorVect = MallocerFreer::GetInstance()->MallocDoubleMatrix3d
                (diisNumErrorVect, this->molecule->GetTotalNumberAOs(), this->molecule->GetTotalNumberAOs());
      diisErrorProducts = MallocerFreer::GetInstance()->MallocDoubleMatrix2d(diisNumErrorVect+1, diisNumErrorVect+1);
      diisErrorCoefficients = MallocerFreer::GetInstance()->MallocDoubleMatrix1d(diisNumErrorVect+1);
   }

   try{
      // calculate electron integral
      this->CalcGammaAB(this->gammaAB, this->molecule);
      this->CalcOverlap(this->overlap, this->molecule);

      // SCF
      double rmsDensity;
      int maxIterationsSCF = Parameters::GetInstance()->GetMaxIterationsSCF();
      bool isGuess=true;
      for(int i=0; i<maxIterationsSCF; i++){

         // calc. electron population in each atom.
         this->CalcAtomicElectronPopulation(this->atomicElectronPopulation, 
                                            this->orbitalElectronPopulation, 
                                            this->molecule);

         this->UpdateOldOrbitalElectronPopulation(oldOrbitalElectronPopulation, 
                                                  this->orbitalElectronPopulation, 
                                                  this->molecule->GetTotalNumberAOs());

         (i==0 && requiresGuess) ? isGuess = true : isGuess = false;
         this->CalcFockMatrix(this->fockMatrix, 
                              this->molecule, 
                              this->overlap, 
                              this->gammaAB,
                              this->orbitalElectronPopulation, 
                              this->atomicElectronPopulation,
                              isGuess);

         // diagonalization
         bool calcEigenVectors = true;
         MolDS_mkl_wrapper::LapackWrapper::GetInstance()->Dsyevd(this->fockMatrix, 
                                                                 this->energiesMO, 
                                                                 this->molecule->GetTotalNumberAOs(), 
                                                                 calcEigenVectors);

         // calc. electron population in each orbital
         this->CalcOrbitalElectronPopulation(this->orbitalElectronPopulation, 
                                             this->molecule, 
                                             this->fockMatrix);


         // check convergence or update oldpopulation
         if(this->SatisfyConvergenceCriterion(oldOrbitalElectronPopulation, 
                                              this->orbitalElectronPopulation,
                                              this->molecule->GetTotalNumberAOs(), &rmsDensity, i)){
            // converged!!!!!
            cout << this->messageSCFMetConvergence;

            // calc. some properties.
            // e.g. electronic energy, electron population in each atom, and core replsion.
            this->CalcAtomicElectronPopulation(this->atomicElectronPopulation, 
                                               this->orbitalElectronPopulation, 
                                               this->molecule);

            this->CalcCoreRepulsionEnergy();
            this->CalcElecEnergy(&this->elecEnergy, 
                                 this->molecule, 
                                 this->energiesMO, 
                                 this->fockMatrix, 
                                 this->gammaAB,
                                 this->coreRepulsionEnergy);

            this->OutputResults(this->fockMatrix, 
                                this->energiesMO, 
                                this->atomicElectronPopulation, 
                                this->molecule);
            break;
         }
         else{
            if(!isGuess){ 
               // damping
               this->DoesDamp(rmsDensity, this->orbitalElectronPopulation, oldOrbitalElectronPopulation, this->molecule);
           
               // diis 
               this->DoesDIIS(this->orbitalElectronPopulation,
                              oldOrbitalElectronPopulation,
                              diisStoredDensityMatrix,
                              diisStoredErrorVect,
                              diisErrorProducts,
                              diisErrorCoefficients,
                              diisNumErrorVect,
                              this->molecule,
                              i);
            }
         }

         // SCF fails
         if(i==maxIterationsSCF-1){
            stringstream ss;
            ss << this->errorMessageSCFNotConverged << maxIterationsSCF << "\n";
            throw MolDSException(ss.str());
         }
      }
   }
   catch(MolDSException ex){
      this->FreeSCFTemporaryMatrices(&oldOrbitalElectronPopulation,
                                     &diisStoredDensityMatrix,
                                     &diisStoredErrorVect,
                                     &diisErrorProducts,
                                     &diisErrorCoefficients);

      throw ex;
   }
   this->FreeSCFTemporaryMatrices(&oldOrbitalElectronPopulation,
                                  &diisStoredDensityMatrix,
                                  &diisStoredErrorVect,
                                  &diisErrorProducts,
                                  &diisErrorCoefficients);

   double ompEndTime = omp_get_wtime();
   cout << this->messageOmpElapsedTimeSCF;
   cout << ompEndTime - ompStartTime;
   cout << this->messageUnitSec << endl;
   cout << this->messageDoneSCF;

}

void Cndo2::DoesSCF(){
   bool requiresGuess = true;
   this->DoesSCF(requiresGuess);
}

void Cndo2::DoesCIS(){
   stringstream ss;
   ss << this->errorMessageCISNotImplemented;
   throw MolDSException(ss.str());
}

double Cndo2::GetElectronicEnergy(){
   return this->elecEnergy;
}

double Cndo2::GetCoreRepulsionEnergy(){
   return this->coreRepulsionEnergy;
}
double** Cndo2::GetForce(int electronicStateIndex){
   this->CalcForce(electronicStateIndex);
   return this->matrixForce;
}

void Cndo2::CalcForce(int electronicStateIndex){
   stringstream ss;
   ss << this->errorMessageCalcForceNotImplemented;
   throw MolDSException(ss.str());
}

void Cndo2::FreeSCFTemporaryMatrices(double*** oldOrbitalElectronPopulation,
                                     double**** diisStoredDensityMatrix,
                                     double**** diisStoredErrorVect,
                                     double*** diisErrorProducts,
                                     double** diisErrorCoefficients){

   int diisNumErrorVect = Parameters::GetInstance()->GetDiisNumErrorVectSCF();
   if(*oldOrbitalElectronPopulation != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (oldOrbitalElectronPopulation, this->molecule->GetTotalNumberAOs());
      //cout << "oldOrbitalElectronPopulation deleted\n";
   }
   if(*diisStoredDensityMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix3d
      (diisStoredDensityMatrix, diisNumErrorVect, this->molecule->GetTotalNumberAOs());
      //cout << "diisStoredDensityMatrix deleted\n";
   } 
   if(*diisStoredErrorVect != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix3d
      (diisStoredErrorVect, diisNumErrorVect, this->molecule->GetTotalNumberAOs());
      diisStoredErrorVect = NULL;
      //cout << "diisStoredErrorVect deleted\n";
   } 
   if(*diisErrorProducts != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d
      (diisErrorProducts, diisNumErrorVect+1);
      //cout << "diisErrorProducts deleted\n";
   } 
   if(*diisErrorCoefficients != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix1d
      (diisErrorCoefficients);
      //cout << "diisErrorCoefficients deleted\n";
   } 

}

/***
 *
 *  see ref. [P_1980] for diis methods.
 *
 */
void Cndo2::DoesDIIS(double** orbitalElectronPopulation,
                     double** oldOrbitalElectronPopulation,
                     double*** diisStoredDensityMatrix,
                     double*** diisStoredErrorVect,
                     double** diisErrorProducts,
                     double* diisErrorCoefficients,
                     int diisNumErrorVect,
                     Molecule* molecule,
                     int step){

   int totalNumberAOs = molecule->GetTotalNumberAOs();
   double diisStartError = Parameters::GetInstance()->GetDiisStartErrorSCF();
   double diisEndError = Parameters::GetInstance()->GetDiisEndErrorSCF();

   if( 0 < diisNumErrorVect){
      for(int m=0; m<diisNumErrorVect-1; m++){
         for(int j=0; j<totalNumberAOs; j++){
            for(int k=0; k<totalNumberAOs; k++){
               diisStoredDensityMatrix[m][j][k] = diisStoredDensityMatrix[m+1][j][k];
               diisStoredErrorVect[m][j][k] = diisStoredErrorVect[m+1][j][k];
            }
         }
      }

      for(int j=0; j<totalNumberAOs; j++){
         for(int k=0; k<totalNumberAOs; k++){
            diisStoredDensityMatrix[diisNumErrorVect-1][j][k] = orbitalElectronPopulation[j][k];
            diisStoredErrorVect[diisNumErrorVect-1][j][k] = orbitalElectronPopulation[j][k] 
                                                           -oldOrbitalElectronPopulation[j][k];
                     
         }
      }

      for(int mi=0; mi<diisNumErrorVect-1; mi++){
         for(int mj=0; mj<diisNumErrorVect-1; mj++){
            diisErrorProducts[mi][mj] = diisErrorProducts[mi+1][mj+1];
         }
      }
               
      double tempErrorProduct=0.0;
      for(int mi=0; mi<diisNumErrorVect; mi++){
         tempErrorProduct = 0.0;
         for(int j=0; j<totalNumberAOs; j++){
            for(int k=0; k<totalNumberAOs; k++){
               tempErrorProduct += diisStoredErrorVect[mi][j][k]*diisStoredErrorVect[diisNumErrorVect-1][j][k];
            }
         }
         diisErrorProducts[mi][diisNumErrorVect-1] = tempErrorProduct;
         diisErrorProducts[diisNumErrorVect-1][mi] = tempErrorProduct;
         diisErrorProducts[mi][diisNumErrorVect] = -1.0;
         diisErrorProducts[diisNumErrorVect][mi] = -1.0;
         diisErrorCoefficients[mi] = 0.0;
      }
      diisErrorProducts[diisNumErrorVect][diisNumErrorVect] = 0.0;
      diisErrorCoefficients[diisNumErrorVect] = -1.0;

      double eMax = 0;
      for(int j=0; j<totalNumberAOs; j++){
         for(int k=0; k<totalNumberAOs; k++){
            eMax = max(eMax, fabs(diisStoredErrorVect[diisNumErrorVect-1][j][k]));
         }
      }

      if(diisNumErrorVect <= step && diisEndError<eMax && eMax<diisStartError){
         MolDS_mkl_wrapper::LapackWrapper::GetInstance()->Dsysv(diisErrorProducts, 
                                                                diisErrorCoefficients, 
                                                                diisNumErrorVect+1);
         for(int j=0; j<totalNumberAOs; j++){
            for(int k=0; k<totalNumberAOs; k++){
               orbitalElectronPopulation[j][k] = 0.0;
               for(int m=0; m<diisNumErrorVect; m++){
                  orbitalElectronPopulation[j][k] += diisErrorCoefficients[m]*diisStoredDensityMatrix[m][j][k];
               }
            }
         }

      }
   }
}

void Cndo2::DoesDamp(double rmsDensity, double** orbitalElectronPopulation, 
                     double** oldOrbitalElectronPopulation, Molecule* molecule){

   double dampingThresh = Parameters::GetInstance()->GetDampingThreshSCF();
   double dampingWeight = Parameters::GetInstance()->GetDampingWeightSCF();
   if(0.0 < dampingWeight && dampingThresh < rmsDensity){
      for(int j=0; j<molecule->GetTotalNumberAOs(); j++){
         for(int k=0; k<molecule->GetTotalNumberAOs(); k++){
            orbitalElectronPopulation[j][k] *= (1.0 - dampingWeight);
            orbitalElectronPopulation[j][k] += dampingWeight*oldOrbitalElectronPopulation[j][k];
         }
      }
   } 

}

void Cndo2::OutputResults(double** fockMatrix, double* energiesMO, double* atomicElectronPopulation, Molecule* molecule){

   // output MO energy
   cout << this->messageEnergiesMOs;
   cout << this->messageEnergiesMOsTitle;
   double eV2AU = Parameters::GetInstance()->GetEV2AU();
   for(int mo=0; mo<molecule->GetTotalNumberAOs(); mo++){
      if(mo < molecule->GetTotalNumberValenceElectrons()/2){
         printf("\t\t %d\t%s\t%e\t%e \n",
         mo, this->messageOcc.c_str(), energiesMO[mo], energiesMO[mo]/eV2AU);
      }
      else{
         printf("\t\t %d\t%s\t%e\t%e \n",
         mo, this->messageUnOcc.c_str(), energiesMO[mo], energiesMO[mo]/eV2AU);
      }
   }
   cout << endl << endl;

   // output total energy
   cout << this->messageElecEnergy;
   cout << this->messageElecEnergyTitle;
   printf("\t\t%e\t%e\n\n",this->elecEnergy, 
                           this->elecEnergy / Parameters::GetInstance()->GetEV2AU());

   // output core repulsion energy
   cout << this->messageCoreRepulsion;
   cout << this->messageCoreRepulsionTitle;
   printf("\t\t%e\t%e\n\n",this->coreRepulsionEnergy, this->coreRepulsionEnergy/eV2AU);

   // ToDo: output eigen-vectors of the Hartree Fock matrix
  
   // output Mulliken charge
   cout << messageMullikenAtoms;
   cout << messageMullikenAtomsTitle;
   for(int a=0; a<molecule->GetAtomVect()->size(); a++){
      Atom* atom = (*molecule->GetAtomVect())[a];
      printf("\t\t%d\t%s\t%e\t%e\n",a,AtomTypeStr(atom->GetAtomType()),atom->GetCoreCharge(),atom->GetCoreCharge()-atomicElectronPopulation[a]);
   }
   cout << endl << endl;


}

void Cndo2::CalcElecEnergy(double* elecEnergy, Molecule* molecule, double* energiesMO, double** fockMatrix, double** gammaAB, double coreRepulsionEnergy){
   double electronicEnergy = 0.0;

   // use density matrix for electronic energy
   int totalNumberAOs = this->molecule->GetTotalNumberAOs();
   double** fMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                       (totalNumberAOs, totalNumberAOs);
   double** hMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                       (totalNumberAOs, totalNumberAOs);
   double** dammyOrbitalElectronPopulation  = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                       (totalNumberAOs, totalNumberAOs);
   double* dammyAtomicElectronPopulation  = MallocerFreer::GetInstance()->MallocDoubleMatrix1d
                       (molecule->GetAtomVect()->size());

   try{
      bool isGuess = false;
      this->CalcFockMatrix(fMatrix, 
                           this->molecule, 
                           this->overlap, 
                           this->gammaAB,
                           this->orbitalElectronPopulation, 
                           this->atomicElectronPopulation,
                           isGuess);
      this->CalcFockMatrix(hMatrix, 
                           this->molecule, 
                           this->overlap, 
                           this->gammaAB,
                           dammyOrbitalElectronPopulation, 
                           dammyAtomicElectronPopulation,
                           isGuess);

      for(int i=0; i<totalNumberAOs; i++){
         for(int j=i+1; j<totalNumberAOs; j++){
            fMatrix[j][i] = fMatrix[i][j];
            hMatrix[j][i] = hMatrix[i][j];
         }
      }

      for(int i=0; i<totalNumberAOs; i++){
         for(int j=0; j<totalNumberAOs; j++){
            electronicEnergy += this->orbitalElectronPopulation[j][i]*
                                 (fMatrix[i][j] + hMatrix[i][j]);
         }
      }
      electronicEnergy *= 0.5;
   }
   catch(MolDSException ex){
      this->FreeElecEnergyMatrices(&fMatrix, 
                                    &hMatrix, 
                                    &dammyOrbitalElectronPopulation, 
                                    &dammyAtomicElectronPopulation );
      throw ex;
   }
   this->FreeElecEnergyMatrices(&fMatrix, 
                                 &hMatrix, 
                                 &dammyOrbitalElectronPopulation, 
                                 &dammyAtomicElectronPopulation );

   // use two electrons integrals for electronic energy
   /*
   for(int mo=0; mo<molecule->GetTotalNumberValenceElectrons()/2; mo++){
      electronicEnergy += 2.0*energiesMO[mo];
   }

   for(int moA=0; moA<molecule->GetTotalNumberValenceElectrons()/2; moA++){
      for(int moB=0; moB<molecule->GetTotalNumberValenceElectrons()/2; moB++){

         electronicEnergy -= 2.0*this->GetMolecularIntegralElement(moA, moA, moB, moB, 
                                                              molecule, fockMatrix, gammaAB);
         electronicEnergy += 1.0*this->GetMolecularIntegralElement(moA, moB, moB, moA, 
                                                              molecule, fockMatrix, gammaAB);
      }
   }
   */

   *elecEnergy = electronicEnergy + coreRepulsionEnergy;
}

void Cndo2::FreeElecEnergyMatrices(double*** fMatrix, 
                                    double*** hMatrix, 
                                    double*** dammyOrbitalElectronPopulation, 
                                    double**  dammyAtomicElectronPopulation ){
   
   int totalNumberAOs = this->molecule->GetTotalNumberAOs();
   if(*fMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(fMatrix, totalNumberAOs);
      //cout << "fMatrix deleted\n";
   }
   if(*hMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(hMatrix, totalNumberAOs);
      //cout << "hMatrix deleted\n";
   }
   if(*dammyOrbitalElectronPopulation != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(dammyOrbitalElectronPopulation, 
                                                       totalNumberAOs);
      //cout << "dammyOrbitalElectronPopulation deleted\n";
   }
   if(*dammyAtomicElectronPopulation != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix1d(dammyAtomicElectronPopulation);
      //cout << "dammyAtomicElectronPopulation deleted\n";
   }

}

// The order of mol, moJ, moK, moL is consistent with Eq. (9) in [RZ_1973]
double Cndo2::GetMolecularIntegralElement(int moI, int moJ, int moK, int moL, 
                                          Molecule* molecule, double** fockMatrix, double** gammaAB){
   double value = 0.0;
   Atom* atomA;
   Atom* atomB;
   int firstAOIndexA;
   int firstAOIndexB;
   int numberAOsA;
   int numberAOsB;
   double gamma;

   for(int A=0; A<molecule->GetAtomVect()->size(); A++){
      atomA = (*molecule->GetAtomVect())[A];
      firstAOIndexA = atomA->GetFirstAOIndex();
      numberAOsA = atomA->GetValence().size();

      for(int B=0; B<molecule->GetAtomVect()->size(); B++){
         atomB = (*molecule->GetAtomVect())[B];
         firstAOIndexB = atomB->GetFirstAOIndex();
         numberAOsB = atomB->GetValence().size();
         gamma = gammaAB[A][B];

         for(int mu=firstAOIndexA; mu<firstAOIndexA+numberAOsA; mu++){
            for(int nu=firstAOIndexB; nu<firstAOIndexB+numberAOsB; nu++){

               value += gamma*fockMatrix[moI][mu]*fockMatrix[moJ][mu]*fockMatrix[moK][nu]*fockMatrix[moL][nu];
            }
         }

      }
   }

   return value;
}

void Cndo2::UpdateOldOrbitalElectronPopulation(double** oldOrbitalElectronPopulation, 
                                               double** orbitalElectronPopulation,
                                               int numberAOs){

   for(int i=0; i<numberAOs; i++){
      for(int j=0; j<numberAOs; j++){
         oldOrbitalElectronPopulation[i][j] = orbitalElectronPopulation[i][j];
      }
   }
}

bool Cndo2::SatisfyConvergenceCriterion(double** oldOrbitalElectronPopulation, 
                                        double** orbitalElectronPopulation,
                                        int numberAOs, double* rmsDensity, int times){
   bool satisfy = false;

   double change = 0.0;
   for(int i=0; i<numberAOs; i++){
      for(int j=0; j<numberAOs; j++){
         change += pow(oldOrbitalElectronPopulation[i][j] - orbitalElectronPopulation[i][j], 2.0);
      }
   }
   *rmsDensity = sqrt(change);
  
   printf("SCF iter=%d: RMS density=%.15lf \n",times,*rmsDensity);
   if(*rmsDensity < Parameters::GetInstance()->GetThresholdSCF()){
      satisfy = true;
   }

   return satisfy; 
}

/*********
 *
 *
 * Upper right part of the Fock matrix is only caluculated.
 *
 *
 * ******/
void Cndo2::CalcFockMatrix(double** fockMatrix, Molecule* molecule, double** overlap, double** gammaAB,
                           double** orbitalElectronPopulation, double* atomicElectronPopulation,
                           bool isGuess){

   MallocerFreer::GetInstance()->InitializeDoubleMatrix2d
                                 (fockMatrix, molecule->GetTotalNumberAOs(), molecule->GetTotalNumberAOs());

   #pragma omp parallel for schedule(auto)
   for(int A=0; A<molecule->GetAtomVect()->size(); A++){
      Atom* atomA = (*molecule->GetAtomVect())[A];
      int firstAOIndexA = atomA->GetFirstAOIndex();
      int numberAOsA = atomA->GetValence().size();

      for(int B=A; B<molecule->GetAtomVect()->size(); B++){
         Atom* atomB = (*molecule->GetAtomVect())[B];
         int firstAOIndexB = atomB->GetFirstAOIndex();
         int numberAOsB = atomB->GetValence().size();

         for(int mu=firstAOIndexA; mu<firstAOIndexA+numberAOsA; mu++){
            for(int nu=firstAOIndexB; nu<firstAOIndexB+numberAOsB; nu++){

               if(mu == nu){
                  // diagonal part
                  fockMatrix[mu][mu] = this->GetFockDiagElement(atomA, 
                                                                A, 
                                                                mu, 
                                                                molecule, 
                                                                gammaAB,
                                                                orbitalElectronPopulation, 
                                                                atomicElectronPopulation,
                                                                isGuess);
               }
               else if(mu < nu){
                  // upper right part
                  fockMatrix[mu][nu] = this->GetFockOffDiagElement(atomA, 
                                                                   atomB,
                                                                   A, 
                                                                   B, 
                                                                   mu, 
                                                                   nu, 
                                                                   molecule, 
                                                                   gammaAB,
                                                                   overlap,
                                                                   orbitalElectronPopulation, 
                                                                   isGuess);
               }
               else{
                  // lower left part (not calculated)
               }
            }
         }
                        
      }
   }
   /*  
   printf("fock matrix\n"); 
   for(int o=0; o<this->molecule->GetTotalNumberAOs(); o++){
      for(int p=0; p<this->molecule->GetTotalNumberAOs(); p++){
         printf("%lf\t",fockMatrix[o][p]);
      }
      printf("\n");
   }
   printf("\n\n");
   */

}

double Cndo2::GetFockDiagElement(Atom* atomA, int atomAIndex, int mu, 
                                 Molecule* molecule, double** gammaAB,
                                 double** orbitalElectronPopulation, double* atomicElectronPopulation,
                                 bool isGuess){
   double value;
   int firstAOIndexA = atomA->GetFirstAOIndex();
   value = -1.0 * atomA->GetImuAmu(atomA->GetValence()[mu-firstAOIndexA]);
   if(!isGuess){
      double temp = atomicElectronPopulation[atomAIndex] - atomA->GetCoreCharge() 
                            -0.5*( orbitalElectronPopulation[mu][mu] -1.0  );
      value += temp*gammaAB[atomAIndex][atomAIndex];

      temp = 0.0;
      for(int BB=0; BB<molecule->GetAtomVect()->size(); BB++){
         if(BB != atomAIndex){
            Atom* atomBB = (*molecule->GetAtomVect())[BB];
            temp += ( atomicElectronPopulation[BB] - atomBB->GetCoreCharge()  )
                     *gammaAB[atomAIndex][BB];
         }
      }
      value += temp;
   }

   return value;
}

double Cndo2::GetFockOffDiagElement(Atom* atomA, Atom* atomB, int atomAIndex, int atomBIndex, 
                                    int mu, int nu, Molecule* molecule, double** gammaAB, double** overlap,
                                    double** orbitalElectronPopulation, bool isGuess){
   double value;

   double K = 1.0;  // = 1.0 or 0.75, see Eq. (3.79) in J. A. Pople book
   if(atomA->GetValenceShellType() >= m || atomB->GetValenceShellType() >= m){
      K = 0.75;
   }

   double bondParameter = 0.5*K*(atomA->GetBondingParameter() + atomB->GetBondingParameter()); 
   value =  bondParameter*overlap[mu][nu];
   if(!isGuess){
      value -= 0.5*orbitalElectronPopulation[mu][nu]*gammaAB[atomAIndex][atomBIndex];
   }

   return value;
}

void Cndo2::CalcOrbitalElectronPopulation(double** orbitalElectronPopulation, 
                                          Molecule* molecule, double** fockMatrix){

   int totalNumberAOs = molecule->GetTotalNumberAOs();
   MallocerFreer::GetInstance()->InitializeDoubleMatrix2d
                                 (orbitalElectronPopulation, totalNumberAOs, totalNumberAOs);

   double transposedFockMatrix[totalNumberAOs][totalNumberAOs];
   for(int mu=0; mu<totalNumberAOs; mu++){
      for(int nu=0; nu<totalNumberAOs; nu++){
         transposedFockMatrix[mu][nu] = fockMatrix[nu][mu];
      }
   }
   
   double value=0.0;
   int numberTotalValenceElectrons = molecule->GetTotalNumberValenceElectrons();
   for(int mu=0; mu<totalNumberAOs; mu++){
      for(int nu=mu; nu<totalNumberAOs; nu++){

         value = 0.0;
         for(int mo=0; mo<numberTotalValenceElectrons/2; mo++){
            value += transposedFockMatrix[mu][mo]*transposedFockMatrix[nu][mo];
         }

         orbitalElectronPopulation[mu][nu] = 2.0*value;
      }
   }
   
   for(int mu=0; mu<totalNumberAOs; mu++){
      for(int nu=mu+1; nu<totalNumberAOs; nu++){
         orbitalElectronPopulation[nu][mu] = orbitalElectronPopulation[mu][nu];
      }
   }

   /* 
   printf("orbital population\n");
   for(int mu=0; mu<totalNumberAOs; mu++){
      for(int nu=0; nu<totalNumberAOs; nu++){
         printf("%lf\t",orbitalElectronPopulation[mu][nu]);
      }
      printf("\n");
   }
   printf("\n");
   */

}

void Cndo2::CalcAtomicElectronPopulation(double* atomicElectronPopulation,
                                         double** orbitalElectronPopulation, Molecule* molecule){

   int totalNumberAtoms = molecule->GetAtomVect()->size();
   MallocerFreer::GetInstance()->InitializeDoubleMatrix1d
                                 (atomicElectronPopulation, totalNumberAtoms);

   int firstAOIndex = 0;
   int numberAOs = 0;
   for(int A=0; A<totalNumberAtoms; A++){
      firstAOIndex = (*molecule->GetAtomVect())[A]->GetFirstAOIndex();
      numberAOs = (*molecule->GetAtomVect())[A]->GetValence().size();

      atomicElectronPopulation[A] = 0.0;
      for(int i=firstAOIndex; i<firstAOIndex+numberAOs; i++){
         atomicElectronPopulation[A] += orbitalElectronPopulation[i][i];
      }
      //printf("P_AA[%d]=%lf\n",A,atomicElectronPopulation[A]);
   }

}

// calculate gammaAB matrix. (B.56) and (B.62) in J. A. Pople book.
void Cndo2::CalcGammaAB(double** gammaAB, Molecule* molecule){

   int totalAtomNumber = molecule->GetAtomVect()->size();
   #pragma omp parallel for schedule(auto)
   for(int A=0; A<totalAtomNumber; A++){
      Atom* atomA = (*(molecule->GetAtomVect()))[A];
      int na = atomA->GetValenceShellType() + 1;
      double orbitalExponentA = atomA->GetOrbitalExponent
                                (atomA->GetValenceShellType(), s);
      for(int B=A; B<totalAtomNumber; B++){
         Atom* atomB = (*(molecule->GetAtomVect()))[B];
         int nb = atomB->GetValenceShellType() + 1;
         double orbitalExponentB = atomB->GetOrbitalExponent
                                   (atomB->GetValenceShellType(), s);

         // inter nuclear distance
         double R = sqrt( 
                  pow( atomA->GetXyz()[0] - atomB->GetXyz()[0], 2.0)
                 +pow( atomA->GetXyz()[1] - atomB->GetXyz()[1], 2.0)
                 +pow( atomA->GetXyz()[2] - atomB->GetXyz()[2], 2.0)
                  );

         double value = 0.0;
         double temp = 0.0;
         if(R>0.0){
            // (B.56)
            value = pow(0.5*R, 2.0*na);
            value *= this->GetReducedOverlap(2*na-1, 0, 2.0*orbitalExponentA*R, 0);

            for(int l=1; l<=2*nb; l++){
               temp = 0.0;
               temp = l;
               temp *= pow(2.0*orbitalExponentB, 2*nb-l);
               temp /= Factorial(2*nb-l)*2.0*nb;
               temp *= pow(0.5*R, 2.0*nb-l+2.0*na);
               temp *= this->GetReducedOverlap(2*na-1, 2*nb-l, 2.0*orbitalExponentA*R, 2.0*orbitalExponentB*R);
               value -= temp;
            }

            value *= pow(2.0*orbitalExponentA, 2.0*na+1.0);
            value /= Factorial(2*na);

         }
         else{
            // (B.62)
            value =  Factorial(2*na-1);
            value /= pow(2.0*orbitalExponentA, 2.0*na);

            for(int l=1; l<=2*nb; l++){
               temp = l;
               temp *= pow(2.0*orbitalExponentB, 2*nb-l);
               temp *= Factorial(2*na+2*nb-l-1);
               temp /= Factorial(2*nb-l);
               temp /= 2.0*nb;
               temp /= pow( 2.0*orbitalExponentA + 2.0*orbitalExponentB, 2.0*(na+nb)-l );
               value -= temp;
            }

            value *= pow(2.0*orbitalExponentA, 2.0*na+1);
            value /= Factorial(2*na);

         }
         gammaAB[A][B] = value;
      }
   }

   #pragma omp parallel for schedule(auto)
   for(int A=0; A<totalAtomNumber; A++){
      for(int B=0; B<A; B++){
         gammaAB[A][B] = gammaAB[B][A];
      }
   }
   
   /* 
   printf("gamma matrix\n");
   for(int A=0; A<totalAtomNumber; A++){
      for(int B=0; B<totalAtomNumber; B++){
         printf("gammaAB[%d][%d]=%lf\n",A,B,gammaAB[A][B]);
      }
      printf("\n");
   }
   printf("\n");
   */

}

void Cndo2::FreeDiatomicOverlapAndRotatingMatrix(double*** diatomicOverlap, double*** rotatingMatrix){

   // free
   if(*diatomicOverlap != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(diatomicOverlap, OrbitalType_end);
      //cout << "diatomicOverlap deleted\n";
   }
   if(*rotatingMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(rotatingMatrix, OrbitalType_end);
      //cout << "rotatingMatrix deleted\n";
   }

}

// calculate Overlap matrix. E.g. S_{\mu\nu} in (3.74) in J. A. Pople book.
void Cndo2::CalcOverlap(double** overlap, Molecule* molecule){
   int totalAONumber = molecule->GetTotalNumberAOs();
   int totalAtomNumber = molecule->GetAtomVect()->size();

   #pragma omp parallel
   {
      // malloc
      double** diatomicOverlap =  MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                   (OrbitalType_end, OrbitalType_end);
      double** rotatingMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                   (OrbitalType_end, OrbitalType_end);

      try{
         // calculation overlap matrix
         for(int mu=0; mu<totalAONumber; mu++){
            overlap[mu][mu] = 1.0;
         }

         #pragma omp for schedule(auto)
         for(int A=0; A<totalAtomNumber; A++){
            Atom* atomA = (*(molecule->GetAtomVect()))[A];
            for(int B=A+1; B<totalAtomNumber; B++){
               Atom* atomB = (*(molecule->GetAtomVect()))[B];

               this->CalcDiatomicOverlapInDiatomicFrame(diatomicOverlap, atomA, atomB);
               this->CalcRotatingMatrix(rotatingMatrix, atomA, atomB);
               this->RotateDiatmicOverlapToSpaceFrame(diatomicOverlap, rotatingMatrix);
               this->SetOverlapElement(overlap, diatomicOverlap, atomA, atomB);

            }
         }
      }
      catch(MolDSException ex){
         this->FreeDiatomicOverlapAndRotatingMatrix(&diatomicOverlap, &rotatingMatrix);
         throw ex;
      }
      this->FreeDiatomicOverlapAndRotatingMatrix(&diatomicOverlap, &rotatingMatrix);
   }
   /*
   printf("overlap matrix\n"); 
   for(int o=0; o<this->molecule->GetTotalNumberAOs(); o++){
      for(int p=0; p<this->molecule->GetTotalNumberAOs(); p++){
         printf("%lf\t",overlap[o][p]);
      }
      printf("\n");
   }
   printf("\n");
   */

}

// First derivative of diatomic overlap integrals between AOs in space fixed flame.
// The Overlap matrix is S_{\mu\nu} in (3.74) in J. A. Pople book.
// Note that this methoc can not treat d-obitals 
// because CalcRotatingMatrixFirstDerivative can not treat d-orbitals.
void Cndo2::CalcDiatomicOverlapFirstDerivative(double*** overlapFirstDeri, 
                                               Atom* atomA, Atom* atomB){

   double Cartesian[CartesianType_end] = {atomA->GetXyz()[XAxis] - atomB->GetXyz()[XAxis], 
                                          atomA->GetXyz()[YAxis] - atomB->GetXyz()[YAxis],
                                          atomA->GetXyz()[ZAxis] - atomB->GetXyz()[ZAxis]};
   double R = sqrt( pow(Cartesian[XAxis],2.0) + 
                    pow(Cartesian[YAxis],2.0) + 
                    pow(Cartesian[ZAxis],2.0) );

   // malloc
   double** diatomicOverlap =  MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                   (OrbitalType_end, OrbitalType_end);
   double** rotatingMatrix = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                   (OrbitalType_end, OrbitalType_end);
   double** diaOverlapDeriR =  MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                       (OrbitalType_end, OrbitalType_end);
   double*** rMatDeri = MallocerFreer::GetInstance()->MallocDoubleMatrix3d
                                   (OrbitalType_end, OrbitalType_end, CartesianType_end);

   try{
      this->CalcDiatomicOverlapInDiatomicFrame(diatomicOverlap, atomA, atomB);
      this->CalcRotatingMatrix(rotatingMatrix, atomA, atomB);
      this->CalcDiatomicOverlapFirstDerivativeInDiatomicFrame
                     (diaOverlapDeriR, atomA, atomB);
      this->CalcRotatingMatrixFirstDerivative(rMatDeri, atomA, atomB);

      // rotate
      for(int i=0; i<OrbitalType_end; i++){
         for(int j=0; j<OrbitalType_end; j++){
            for(int c=0; c<CartesianType_end; c++){
               overlapFirstDeri[i][j][c] = 0.0;

               double temp1 = 0.0;
               double temp2 = 0.0;
               double temp3 = 0.0;
               for(int k=0; k<OrbitalType_end; k++){
                  for(int l=0; l<OrbitalType_end; l++){
                     temp1 += rotatingMatrix[i][k] 
                             *rotatingMatrix[j][l]
                             *(Cartesian[c]/R)
                             *diaOverlapDeriR[k][l];
                     temp2 += rMatDeri[i][k][c] 
                             *rotatingMatrix[j][l]
                             *diatomicOverlap[k][l];
                     temp3 += rotatingMatrix[i][k] 
                             *rMatDeri[j][l][c]
                             *diatomicOverlap[k][l];
                  }
               }
               overlapFirstDeri[i][j][c] = temp1 + temp2 + temp3;

            }
         }
      }
   }
   catch(MolDSException ex){
      this->FreeDiatomicOverlapDeriTemps(&diatomicOverlap,
                                         &rotatingMatrix,
                                         &diaOverlapDeriR,
                                         &rMatDeri);
      throw ex;
   }
   // free
   this->FreeDiatomicOverlapDeriTemps(&diatomicOverlap,
                                      &rotatingMatrix,
                                      &diaOverlapDeriR,
                                      &rMatDeri);
}

void Cndo2::FreeDiatomicOverlapDeriTemps(double*** diatomicOverlap, 
                                         double*** rotatingMatrix,
                                         double*** diaOverlapDeriR,
                                         double**** rMatDeri){

   // free
   if(*diatomicOverlap != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(diatomicOverlap, OrbitalType_end);
      //cout << "diatomicOverlap deleted\n";
   }
   if(*rotatingMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(rotatingMatrix, OrbitalType_end);
      //cout << "rotatingMatrix deleted\n";
   }
   if(*diaOverlapDeriR != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(diaOverlapDeriR, OrbitalType_end);
      //cout << "diaOverlapDeriR deleted\n";
   }
   if(*rMatDeri != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix3d(rMatDeri, 
                                                       OrbitalType_end,
                                                       OrbitalType_end);
      //cout << "rMatDeri deleted\n";
   }

}

// calculate Overlap matrix. E.g. S_{\mu\nu} in (3.74) in J. A. Pople book by GTO expansion.
// See Eqs. (28) - (32) in [DY_1977]
void Cndo2::CalcOverlapByGTOExpansion(double** overlap, Molecule* molecule, STOnGType stonG){
   int totalAONumber = molecule->GetTotalNumberAOs();
   int totalAtomNumber = molecule->GetAtomVect()->size();

   // calculation overlap matrix
   for(int mu=0; mu<totalAONumber; mu++){
      overlap[mu][mu] = 1.0;
   }

   #pragma omp for schedule(auto)
   for(int A=0; A<totalAtomNumber; A++){
      Atom* atomA = (*(molecule->GetAtomVect()))[A];
      int firstAOIndexAtomA = atomA->GetFirstAOIndex();
      for(int B=A+1; B<totalAtomNumber; B++){
         Atom* atomB = (*(molecule->GetAtomVect()))[B];
         int firstAOIndexAtomB = atomB->GetFirstAOIndex();

         for(int a=0; a<atomA->GetValence().size(); a++){
            for(int b=0; b<atomB->GetValence().size(); b++){
         
               int mu = firstAOIndexAtomA + a;      
               int nu = firstAOIndexAtomB + b;      
               double value = this->GetOverlapElementByGTOExpansion(atomA, a, atomB, b, stonG);
               overlap[mu][nu] = value;
               overlap[nu][mu] = value;
            }
         }
      }
   }
   /* 
   printf("overlap matrix by STOnG\n"); 
   for(int o=0; o<this->molecule->GetTotalNumberAOs(); o++){
      for(int p=0; p<this->molecule->GetTotalNumberAOs(); p++){
         printf("%lf\t",overlap[o][p]);
      }
      printf("\n");
   }
   printf("\n");
   */

}

// calculate elements of overlap matrix. 
// E.g. S_{\mu\nu} in (3.74) in J. A. Pople book by GTO expansion.
// See Eqs. (28) - (32) in [DY_1977]
double Cndo2::GetOverlapElementByGTOExpansion(Atom* atomA, int valenceIndexA, 
                                              Atom* atomB, int valenceIndexB,
                                              STOnGType stonG){
   double value = 0.0;
   double dx = atomA->GetXyz()[XAxis] - atomB->GetXyz()[XAxis];
   double dy = atomA->GetXyz()[YAxis] - atomB->GetXyz()[YAxis];
   double dz = atomA->GetXyz()[ZAxis] - atomB->GetXyz()[ZAxis];
   double Rab = sqrt( pow(dx, 2.0) + pow(dy, 2.0) + pow(dz,2.0) );
   ShellType shellTypeA = atomA->GetValenceShellType();
   ShellType shellTypeB = atomB->GetValenceShellType();
   OrbitalType valenceOrbitalA = atomA->GetValence()[valenceIndexA];
   OrbitalType valenceOrbitalB = atomB->GetValence()[valenceIndexB];
   double orbitalExponentA = atomA->GetOrbitalExponent(atomA->GetValenceShellType(), 
                                                       valenceOrbitalA);
   double orbitalExponentB = atomB->GetOrbitalExponent(atomB->GetValenceShellType(), 
                                                       valenceOrbitalB);
   double gaussianExponentA = 0.0;
   double gaussianExponentB = 0.0;

   double temp = 0.0;
   for(int i=0; i<=stonG; i++){
      for(int j=0; j<=stonG; j++){
         temp = GTOExpansionSTO::GetInstance()->GetCoefficient
                  (stonG, shellTypeA, valenceOrbitalA, i); 
         temp *= GTOExpansionSTO::GetInstance()->GetCoefficient
                  (stonG, shellTypeB, valenceOrbitalB, j); 
         gaussianExponentA = pow(orbitalExponentA, 2.0) *
                             GTOExpansionSTO::GetInstance()->GetExponent
                              (stonG, shellTypeA, valenceOrbitalA, i);
         gaussianExponentB = pow(orbitalExponentB, 2.0) *
                             GTOExpansionSTO::GetInstance()->GetExponent
                              (stonG, shellTypeB, valenceOrbitalB, j);
         temp *= this->GetGaussianOverlap(atomA->GetAtomType(), valenceOrbitalA, gaussianExponentA, 
                                          atomB->GetAtomType(), valenceOrbitalB, gaussianExponentB,
                                          dx, dy, dz, Rab);
         value += temp;
      }
   }
   return value;
}

// Calculate gaussian overlap integrals of Sa and Sb.
// That is, calculate (S_A|S_B). See Eq. (28) in [DY_1977].
double Cndo2::GetGaussianOverlapSaSb(double gaussianExponentA, 
                                     double gaussianExponentB,
                                     double Rab){
   double value;
   double temp1 = 0.0;
   double temp2 = 0.0;
   temp1 = 2.0*pow(gaussianExponentA*gaussianExponentB, 0.5)
            /(gaussianExponentA+gaussianExponentB);
   temp2 = -1.0* gaussianExponentA*gaussianExponentB
            /(gaussianExponentA+gaussianExponentB);
   value = pow(temp1, 1.5)*exp(temp2*pow(Rab, 2.0));
   return value;
}

// calculate gaussian overlap integrals. 
// See Eqs. (28) - (32) in [DY_1977]
double Cndo2::GetGaussianOverlap(AtomType atomTypeA, 
                                 OrbitalType valenceOrbitalA, 
                                 double gaussianExponentA, 
                                 AtomType atomTypeB, 
                                 OrbitalType valenceOrbitalB, 
                                 double gaussianExponentB,
                                 double dx, double dy, double dz, double Rab){

   double value = 0.0;
   if(valenceOrbitalA == s && valenceOrbitalB == s){
      value = 1.0;
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == px){
      value = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)*dx;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == py){
      value = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)*dy;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == pz){
      value = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)*dz;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == s){
      value = -2.0*pow(gaussianExponentA, 0.5)*gaussianExponentB*dx;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == s){
      value = -2.0*pow(gaussianExponentA, 0.5)*gaussianExponentB*dy;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == s){
      value = -2.0*pow(gaussianExponentA, 0.5)*gaussianExponentB*dz;
      value /= (gaussianExponentA+gaussianExponentB);
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == px){
      double temp = 0.0;
      temp = -1.0*pow(dx,2.0)*gaussianExponentA*gaussianExponentB;
      temp /= (gaussianExponentA+gaussianExponentB);
      temp += 0.5;
      value = 4.0*pow(gaussianExponentA*gaussianExponentB, 0.5);
      value /= (gaussianExponentA+gaussianExponentB);
      value *= temp;
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == py){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dx*dy;
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == pz){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dx*dz;
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == px){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dy*dx;
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == py){
      double temp = 0.0;
      temp = -1.0*pow(dy,2.0)*gaussianExponentA*gaussianExponentB;
      temp /= (gaussianExponentA+gaussianExponentB);
      temp += 0.5;
      value = 4.0*pow(gaussianExponentA*gaussianExponentB, 0.5);
      value /= (gaussianExponentA+gaussianExponentB);
      value *= temp;
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == pz){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dy*dz;
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == px){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dz*dx;
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == py){
      value = -4.0*pow(gaussianExponentA*gaussianExponentB, 1.5);
      value *= pow(gaussianExponentA+gaussianExponentB, -2.0);
      value *= dz*dy;
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == pz){
      double temp = 0.0;
      temp = -1.0*pow(dz,2.0)*gaussianExponentA*gaussianExponentB;
      temp /= (gaussianExponentA+gaussianExponentB);
      temp += 0.5;
      value = 4.0*pow(gaussianExponentA*gaussianExponentB, 0.5);
      value /= (gaussianExponentA+gaussianExponentB);
      value *= temp;
   }
   else{
      stringstream ss;
      ss << this->errorMessageGetGaussianOverlapOrbitalD;
      ss << this->errorMessageAtomA;
      ss << this->errorMessageAtomType << AtomTypeStr(atomTypeA) << endl;
      ss << this->errorMessageOrbitalType << OrbitalTypeStr(valenceOrbitalA) << endl;
      ss << this->errorMessageAtomB;
      ss << this->errorMessageAtomType << AtomTypeStr(atomTypeB) << endl;
      ss << this->errorMessageOrbitalType << OrbitalTypeStr(valenceOrbitalB) << endl;
      throw MolDSException(ss.str());
   }
   double sasb = this->GetGaussianOverlapSaSb(gaussianExponentA,
                                              gaussianExponentB, Rab);
   value *= sasb;

   return value;
}

// calculate elements of analytic first derivative of the overlap matrix. 
// The derivative is carried out related to the coordinate of atom A.
// See Eqs. (34) - (44) in [DY_1977]
double Cndo2::GetOverlapElementFirstDerivativeByGTOExpansion
              (Atom* atomA, int valenceIndexA, Atom* atomB, int valenceIndexB,
               STOnGType stonG, CartesianType axisA){

   double value = 0.0;
   double dx = atomA->GetXyz()[XAxis] - atomB->GetXyz()[XAxis];
   double dy = atomA->GetXyz()[YAxis] - atomB->GetXyz()[YAxis];
   double dz = atomA->GetXyz()[ZAxis] - atomB->GetXyz()[ZAxis];
   double Rab = sqrt( pow(dx, 2.0) + pow(dy, 2.0) + pow(dz,2.0) );
   ShellType shellTypeA = atomA->GetValenceShellType();
   ShellType shellTypeB = atomB->GetValenceShellType();
   OrbitalType valenceOrbitalA = atomA->GetValence()[valenceIndexA];
   OrbitalType valenceOrbitalB = atomB->GetValence()[valenceIndexB];
   double orbitalExponentA = atomA->GetOrbitalExponent(atomA->GetValenceShellType(), 
                                                       valenceOrbitalA);
   double orbitalExponentB = atomB->GetOrbitalExponent(atomB->GetValenceShellType(), 
                                                       valenceOrbitalB);
   double gaussianExponentA = 0.0;
   double gaussianExponentB = 0.0;

   double temp = 0.0;
   for(int i=0; i<=stonG; i++){
      for(int j=0; j<=stonG; j++){
         temp = GTOExpansionSTO::GetInstance()->GetCoefficient
                  (stonG, shellTypeA, valenceOrbitalA, i); 
         temp *= GTOExpansionSTO::GetInstance()->GetCoefficient
                  (stonG, shellTypeB, valenceOrbitalB, j); 
         gaussianExponentA = pow(orbitalExponentA, 2.0) *
                             GTOExpansionSTO::GetInstance()->GetExponent
                              (stonG, shellTypeA, valenceOrbitalA, i);
         gaussianExponentB = pow(orbitalExponentB, 2.0) *
                             GTOExpansionSTO::GetInstance()->GetExponent
                              (stonG, shellTypeB, valenceOrbitalB, j);
         temp *= this->GetGaussianOverlapFirstDerivative
                       (atomA->GetAtomType(), valenceOrbitalA, gaussianExponentA, 
                        atomB->GetAtomType(), valenceOrbitalB, gaussianExponentB,
                        dx, dy, dz, Rab, axisA);
         value += temp;
      }
   }
   return value;
}

// calculate first derivative of gaussian overlap integrals. 
// See Eqs. (35) - (44) in [DY_1977]
double Cndo2::GetGaussianOverlapFirstDerivative
                                (AtomType atomTypeA, 
                                 OrbitalType valenceOrbitalA, 
                                 double gaussianExponentA, 
                                 AtomType atomTypeB, 
                                 OrbitalType valenceOrbitalB, 
                                 double gaussianExponentB,
                                 double dx, double dy, double dz, double Rab, 
                                 CartesianType axisA){
   double value = 0.0;

   if(valenceOrbitalA == s && valenceOrbitalB == s){
      double temp = -2.0*gaussianExponentA*gaussianExponentB
                     /(gaussianExponentA+gaussianExponentB);
      value = temp;
      if(axisA == XAxis){
         value *= dx;
      }
      else if(axisA == YAxis){
         value *= dy;
      }
      else if(axisA == ZAxis){
         value *= dz;
      }
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == px){
      double temp1 = 4.0*pow(gaussianExponentA,2.0)*pow(gaussianExponentB, 1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         double temp2 = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)
                        /(gaussianExponentA+gaussianExponentB);
         value = temp2-temp1*dx*dx;
      }
      else if(axisA == YAxis){
         value = -1.0*temp1*dx*dy;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp1*dx*dz;
      }
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == py){
      double temp1 = 4.0*pow(gaussianExponentA,2.0)*pow(gaussianExponentB, 1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp1*dx*dy;
      }
      else if(axisA == YAxis){
         double temp2 = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)
                        /(gaussianExponentA+gaussianExponentB);
         value = temp2-temp1*dy*dy;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp1*dy*dz;
      }
   }
   else if(valenceOrbitalA == s && valenceOrbitalB == pz){
      double temp1 = 4.0*pow(gaussianExponentA,2.0)*pow(gaussianExponentB, 1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp1*dx*dz;
      }
      else if(axisA == YAxis){
         value = -1.0*temp1*dy*dz;
      }
      else if(axisA == ZAxis){
         double temp2 = 2.0*gaussianExponentA*pow(gaussianExponentB, 0.5)
                        /(gaussianExponentA+gaussianExponentB);
         value = temp2-temp1*dz*dz;
      }
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == s){
      double temp1 = 4.0*pow(gaussianExponentA,1.5)*pow(gaussianExponentB, 2.0)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         double temp2 = 2.0*pow(gaussianExponentA,0.5)*gaussianExponentB
                        /(gaussianExponentA+gaussianExponentB);
         value = -1.0*temp2+temp1*dx*dx;
      }
      else if(axisA == YAxis){
         value = temp1*dx*dy;
      }
      else if(axisA == ZAxis){
         value = temp1*dx*dz;
      }
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == s){
      double temp1 = 4.0*pow(gaussianExponentA,1.5)*pow(gaussianExponentB, 2.0)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = temp1*dx*dy;
      }
      else if(axisA == YAxis){
         double temp2 = 2.0*pow(gaussianExponentA,0.5)*gaussianExponentB
                        /(gaussianExponentA+gaussianExponentB);
         value = -1.0*temp2+temp1*dy*dy;
      }
      else if(axisA == ZAxis){
         value = temp1*dy*dz;
      }
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == s){
      double temp1 = 4.0*pow(gaussianExponentA,1.5)*pow(gaussianExponentB, 2.0)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = temp1*dx*dz;
      }
      else if(axisA == YAxis){
         value = temp1*dy*dz;
      }
      else if(axisA == ZAxis){
         double temp2 = 2.0*pow(gaussianExponentA,0.5)*gaussianExponentB
                        /(gaussianExponentA+gaussianExponentB);
         value = -1.0*temp2+temp1*dz*dz;
      }
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == py){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp2*dy+temp1*dx*dx*dy;
      }
      else if(axisA == YAxis){
         value = -1.0*temp2*dx+temp1*dx*dy*dy;
      }
      else if(axisA == ZAxis){
         value = temp1*dx*dy*dz;
      }
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == px){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp2*dy+temp1*dy*dx*dx;
      }
      else if(axisA == YAxis){
         value = -1.0*temp2*dx+temp1*dy*dy*dx;
      }
      else if(axisA == ZAxis){
         value = temp1*dx*dy*dz;
      }
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == pz){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp2*dz+temp1*dx*dx*dz;
      }
      else if(axisA == YAxis){
         value = temp1*dx*dy*dz;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp2*dx+temp1*dx*dz*dz;
      }
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == px){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = -1.0*temp2*dz+temp1*dz*dx*dx;
      }
      else if(axisA == YAxis){
         value = temp1*dx*dy*dz;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp2*dx+temp1*dz*dz*dx;
      }
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == pz){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = temp1*dx*dy*dz;
      }
      else if(axisA == YAxis){
         value = -1.0*temp2*dz+temp1*dy*dy*dz;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp2*dy+temp1*dy*dz*dz;
      }
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == py){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,2.5)
                     /pow(gaussianExponentA+gaussianExponentB,3.0);
      double temp2 = 4.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      if(axisA == XAxis){
         value = temp1*dx*dy*dz;
      }
      else if(axisA == YAxis){
         value = -1.0*temp2*dz+temp1*dz*dy*dy;
      }
      else if(axisA == ZAxis){
         value = -1.0*temp2*dy+temp1*dz*dz*dy;
      }
   }
   else if(valenceOrbitalA == px && valenceOrbitalB == px){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      double temp2 = gaussianExponentA*gaussianExponentB
                     /(gaussianExponentA+gaussianExponentB); 
      if(axisA == XAxis){
         value = -1.0*temp1*dx*(1.5-temp2*dx*dx);
      }
      else if(axisA == YAxis){
         value = -1.0*temp1*dy*(0.5-temp2*dx*dx);
      }
      else if(axisA == ZAxis){
         value = -1.0*temp1*dz*(0.5-temp2*dx*dx);
      }
   }
   else if(valenceOrbitalA == py && valenceOrbitalB == py){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      double temp2 = gaussianExponentA*gaussianExponentB
                     /(gaussianExponentA+gaussianExponentB); 
      if(axisA == XAxis){
         value = -1.0*temp1*dx*(0.5-temp2*dy*dy);
      }
      else if(axisA == YAxis){
         value = -1.0*temp1*dy*(1.5-temp2*dy*dy);
      }
      else if(axisA == ZAxis){
         value = -1.0*temp1*dz*(0.5-temp2*dy*dy);
      }
   }
   else if(valenceOrbitalA == pz && valenceOrbitalB == pz){
      double temp1 = 8.0*pow(gaussianExponentA*gaussianExponentB,1.5)
                     /pow(gaussianExponentA+gaussianExponentB,2.0);
      double temp2 = gaussianExponentA*gaussianExponentB
                     /(gaussianExponentA+gaussianExponentB); 
      if(axisA == XAxis){
         value = -1.0*temp1*dx*(0.5-temp2*dz*dz);
      }
      else if(axisA == YAxis){
         value = -1.0*temp1*dy*(0.5-temp2*dz*dz);
      }
      else if(axisA == ZAxis){
         value = -1.0*temp1*dz*(1.5-temp2*dz*dz);
      }
   }
   else{
      stringstream ss;
      ss << this->errorMessageGetGaussianOverlapFirstDerivativeOrbitalD;
      ss << this->errorMessageAtomA;
      ss << this->errorMessageAtomType << AtomTypeStr(atomTypeA) << endl;
      ss << this->errorMessageOrbitalType << OrbitalTypeStr(valenceOrbitalA) << endl;
      ss << this->errorMessageAtomB;
      ss << this->errorMessageAtomType << AtomTypeStr(atomTypeB) << endl;
      ss << this->errorMessageOrbitalType << OrbitalTypeStr(valenceOrbitalB) << endl;
      throw MolDSException(ss.str());
   }

   double sasb = this->GetGaussianOverlapSaSb(gaussianExponentA,
                                              gaussianExponentB, Rab);
   value *= sasb;
   return value;
}

// see J. Mol. Struc. (Theochem), 419, 19 (1997) (ref. [BFB_1997])
// we set gamma=0 always.
void Cndo2::CalcRotatingMatrix(double** rotatingMatrix, Atom* atomA, Atom* atomB){
   MallocerFreer::GetInstance()->InitializeDoubleMatrix2d
                                 (rotatingMatrix,  OrbitalType_end, OrbitalType_end);

   double x = atomB->GetXyz()[0] - atomA->GetXyz()[0];
   double y = atomB->GetXyz()[1] - atomA->GetXyz()[1];
   double z = atomB->GetXyz()[2] - atomA->GetXyz()[2];

   EularAngle eularAngle(x, y, z);
   double alpha = eularAngle.GetAlpha();
   double beta  = eularAngle.GetBeta();

   // rotating matrix for s-function
   rotatingMatrix[s][s] = 1.0;

   // rotating matrix for p-function
   // dMatrix is (53) with gamma=0 in J. Mol. Strct. 419, 19(1997) (ref. [BFB_1997])
   rotatingMatrix[py][py] = cos(alpha);
   rotatingMatrix[py][pz] = sin(alpha)*sin(beta);
   rotatingMatrix[py][px] = sin(alpha)*cos(beta);

   rotatingMatrix[pz][py] = 0.0;
   rotatingMatrix[pz][pz] = cos(beta);
   rotatingMatrix[pz][px] = -1.0*sin(beta);

   rotatingMatrix[px][py] = -1.0*sin(alpha);
   rotatingMatrix[px][pz] = cos(alpha)*sin(beta);
   rotatingMatrix[px][px] = cos(alpha)*cos(beta);

   // rotating matrix for d-function
   // dMatrix is (37) in J. Mol. Strct. 419, 19(1997) (ref. [BFB_1997])
   double** dMatrix;
   dMatrix =  MallocerFreer::GetInstance()->MallocDoubleMatrix2d
              (OrbitalType_end, OrbitalType_end);

   dMatrix[dzz][dzz] = 0.5*(3.0*pow(cos(beta),2.0) - 1.0);
   dMatrix[dxxyy][dxxyy] = pow(cos(0.5*beta),4.0);
   dMatrix[dzx][dzx] = (2.0*cos(beta)-1.0)*pow(cos(0.5*beta),2.0);
   dMatrix[dxxyy][dzx] = -2.0*sin(0.5*beta)*pow(cos(0.5*beta),3.0);
   dMatrix[dxxyy][dzz] = sqrt(6.0)*pow(sin(0.5*beta),2.0)*pow(cos(0.5*beta),2.0);
   dMatrix[dxxyy][dyz] = -2.0*pow(sin(0.5*beta),3.0)*pow(cos(0.5*beta),1.0);
   dMatrix[dxxyy][dxy] = pow(sin(0.5*beta),4.0);
   dMatrix[dzx][dzz] = -sqrt(6.0)*cos(beta)*cos(0.5*beta)*sin(0.5*beta);
   dMatrix[dzx][dyz] = (2.0*cos(beta)+1.0)*pow(sin(0.5*beta),2.0);

   rotatingMatrix[dxy][dxy] = cos(2.0*alpha)*            (dMatrix[dxxyy][dxxyy] - dMatrix[dxxyy][dxy]);
   rotatingMatrix[dxy][dyz] = cos(2.0*alpha)*            (-1.0*dMatrix[dxxyy][dzx] - dMatrix[dxxyy][dyz]);
   rotatingMatrix[dxy][dzz] = sqrt(2.0)*sin(2.0*alpha)*  dMatrix[dxxyy][dzz];
   rotatingMatrix[dxy][dzx] = sin(2.0*alpha)*            (-1.0*dMatrix[dxxyy][dzx] + dMatrix[dxxyy][dyz]);
   rotatingMatrix[dxy][dxxyy] = sin(2.0*alpha)*          (dMatrix[dxxyy][dxxyy] + dMatrix[dxxyy][dxy]);

   rotatingMatrix[dyz][dxy] = cos(alpha)*                (dMatrix[dxxyy][dzx] + dMatrix[dxxyy][dyz]);
   rotatingMatrix[dyz][dyz] = cos(alpha)*                (dMatrix[dzx][dzx] + dMatrix[dzx][dyz]);
   rotatingMatrix[dyz][dzz] = -1.0*sqrt(2.0)*sin(alpha)* dMatrix[dzx][dzz];
   rotatingMatrix[dyz][dzx] = sin(alpha)*                (dMatrix[dzx][dzx] - dMatrix[dzx][dyz]);
   rotatingMatrix[dyz][dxxyy] = sin(alpha)*              (dMatrix[dxxyy][dzx] - dMatrix[dxxyy][dyz]);

   rotatingMatrix[dzz][dxy] = 0.0;
   rotatingMatrix[dzz][dyz] = 0.0;
   rotatingMatrix[dzz][dzz] = dMatrix[dzz][dzz];
   rotatingMatrix[dzz][dzx] = sqrt(2.0)*dMatrix[dzx][dzz];
   rotatingMatrix[dzz][dxxyy] = sqrt(2.0)*dMatrix[dxxyy][dzz];

   rotatingMatrix[dzx][dxy] = -1.0*sin(alpha)*           (dMatrix[dxxyy][dzx] + dMatrix[dxxyy][dyz]);
   rotatingMatrix[dzx][dyz] = -1.0*sin(alpha)*           (dMatrix[dzx][dzx] + dMatrix[dzx][dyz]);
   rotatingMatrix[dzx][dzz] = -1.0*sqrt(2.0)*cos(alpha)* dMatrix[dzx][dzz];
   rotatingMatrix[dzx][dzx] = cos(alpha)*                (dMatrix[dzx][dzx] - dMatrix[dzx][dyz]);
   rotatingMatrix[dzx][dxxyy] = cos(alpha)*              (dMatrix[dxxyy][dzx] - dMatrix[dxxyy][dyz]);

   rotatingMatrix[dxxyy][dxy] = -1.0*sin(2.0*alpha)*     (dMatrix[dxxyy][dxxyy] - dMatrix[dxxyy][dxy]);
   rotatingMatrix[dxxyy][dyz] = -1.0*sin(2.0*alpha)*     (-1.0*dMatrix[dxxyy][dzx] - dMatrix[dxxyy][dyz]);
   rotatingMatrix[dxxyy][dzz] = sqrt(2.0)*cos(2.0*alpha)*dMatrix[dxxyy][dzz];
   rotatingMatrix[dxxyy][dzx] = cos(2.0*alpha)*          (-1.0*dMatrix[dxxyy][dzx] + dMatrix[dxxyy][dyz]);
   rotatingMatrix[dxxyy][dxxyy] = cos(2.0*alpha)*        (dMatrix[dxxyy][dxxyy] + dMatrix[dxxyy][dxy]);

   if(dMatrix != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(&dMatrix, OrbitalType_end);
      //cout << "dMatrix deleted\n";
   }

}

// First derivative of rotating matirx. 
// This derivative is related to a coordinate of atom A.
// This method can not calculate d-orbital yet.
// For rotating matirxi, see J. Mol. Struc. (Theochem), 419, 19 (1997) (ref. [BFB_1997])
// we set gamma=0 always.
void Cndo2::CalcRotatingMatrixFirstDerivative(
            double*** rMatFirstDeri, 
            Atom* atomA, 
            Atom* atomB){

   MallocerFreer::GetInstance()->InitializeDoubleMatrix3d(
                                 rMatFirstDeri,  
                                 OrbitalType_end, 
                                 OrbitalType_end,
                                 CartesianType_end);

   double x = atomB->GetXyz()[0] - atomA->GetXyz()[0];
   double y = atomB->GetXyz()[1] - atomA->GetXyz()[1];
   double z = atomB->GetXyz()[2] - atomA->GetXyz()[2];
   double r = sqrt( pow(x,2.0) + pow(y,2.0) );
   double R = sqrt( pow(x,2.0) + pow(y,2.0) + pow(z,2.0) );

   // for s-function
   rMatFirstDeri[s][s][XAxis] = 0.0;
   rMatFirstDeri[s][s][YAxis] = 0.0;
   rMatFirstDeri[s][s][ZAxis] = 0.0;

   // for p-function
   rMatFirstDeri[py][py][XAxis] = -1.0/r + pow(x,2.0)/pow(r,3.0);
   rMatFirstDeri[py][pz][XAxis] = x*y/pow(R,3.0);
   rMatFirstDeri[py][px][XAxis] = (1.0/(pow(r,3.0)*R) + 1.0/(pow(R,3.0)*r))*x*y*z;

   rMatFirstDeri[pz][py][XAxis] = 0.0;
   rMatFirstDeri[pz][pz][XAxis] = x*z/pow(R,3.0);
   rMatFirstDeri[pz][px][XAxis] = x/(r*R) - x*r/pow(R,3.0);

   rMatFirstDeri[px][py][XAxis] = -1.0*x*y/pow(r,3.0);
   rMatFirstDeri[px][pz][XAxis] = -1.0/R + x*x/pow(R,3.0); 
   rMatFirstDeri[px][px][XAxis] = -1.0*z/(r*R) + 
                                  (1.0/(pow(r,3.0)*R) + 1.0/(pow(R,3.0)*r))*x*x*z;

   rMatFirstDeri[py][py][YAxis] = x*y/pow(r,3.0);
   rMatFirstDeri[py][pz][YAxis] = -1.0/R + y*y/pow(R,3.0);
   rMatFirstDeri[py][px][YAxis] = -1.0*z/(r*R) +
                                  (1.0/(pow(r,3.0)*R) + 1.0/(pow(R,3.0)*r))*y*y*z;

   rMatFirstDeri[pz][py][YAxis] = 0.0;
   rMatFirstDeri[pz][pz][YAxis] = y*z/pow(R,3.0); 
   rMatFirstDeri[pz][px][YAxis] = y/(r*R) - y*r/pow(R,3.0);

   rMatFirstDeri[px][py][YAxis] = 1.0/r - y*y/pow(r,3.0);
   rMatFirstDeri[px][pz][YAxis] = x*y/pow(R,3.0);
   rMatFirstDeri[px][px][YAxis] = (1.0/(pow(r,3.0)*R) + 1.0/(pow(R,3.0)*r))*x*y*z;

   rMatFirstDeri[py][py][ZAxis] = 0.0;
   rMatFirstDeri[py][pz][ZAxis] = y*z/pow(R,3.0);
   rMatFirstDeri[py][px][ZAxis] = -1.0*y/(r*R) + y*z*z/(r*pow(R,3.0));

   rMatFirstDeri[pz][py][ZAxis] = 0.0;
   rMatFirstDeri[pz][pz][ZAxis] = -1.0/R + z*z/pow(R,3.0); 
   rMatFirstDeri[pz][px][ZAxis] = -1.0*z*r/pow(R,3.0);

   rMatFirstDeri[px][py][ZAxis] = 0.0;
   rMatFirstDeri[px][pz][ZAxis] = x*z/pow(R,3.0);
   rMatFirstDeri[px][px][ZAxis] = -1.0*x/(r*R) + x*z*z/(r*pow(R,3.0));

   // for d-function
   // ToDo: First derivative of rotating matrix for d-orbital...

}

// see (B.40) in J. A. Pople book.
void Cndo2::CalcDiatomicOverlapInDiatomicFrame(double** diatomicOverlap, Atom* atomA, Atom* atomB){

   int na = atomA->GetValenceShellType() + 1;
   int nb = atomB->GetValenceShellType() + 1;
   int m = 0;
   double alpha = 0.0;
   double beta = 0.0;
   double pre = 0.0;
   double reducedOverlap = 0.0;
   double orbitalExponentA = 0.0;
   double orbitalExponentB = 0.0;
   double R = 0.0; // Inter nuclear distance between aton A and B.

   MallocerFreer::GetInstance()->InitializeDoubleMatrix2d
                                 (diatomicOverlap, OrbitalType_end, OrbitalType_end);
   R = sqrt( 
            pow( atomA->GetXyz()[0] - atomB->GetXyz()[0], 2.0)
           +pow( atomA->GetXyz()[1] - atomB->GetXyz()[1], 2.0)
           +pow( atomA->GetXyz()[2] - atomB->GetXyz()[2], 2.0)
           );

   for(int a=0; a<atomA->GetValence().size(); a++){
      OrbitalType valenceOrbitalA = atomA->GetValence()[a];
      RealSphericalHarmonicsIndex realShpericalHarmonicsA(valenceOrbitalA);
      orbitalExponentA = atomA->GetOrbitalExponent
                                (atomA->GetValenceShellType(), valenceOrbitalA);

      for(int b=0; b<atomB->GetValence().size(); b++){
         OrbitalType valenceOrbitalB = atomB->GetValence()[b];
         RealSphericalHarmonicsIndex realShpericalHarmonicsB(valenceOrbitalB);
         orbitalExponentB = atomB->GetOrbitalExponent
                                   (atomB->GetValenceShellType(), valenceOrbitalB);

         if(realShpericalHarmonicsA.GetM() == realShpericalHarmonicsB.GetM()){
            m = abs(realShpericalHarmonicsA.GetM());
            alpha = orbitalExponentA * R;
            beta =  orbitalExponentB * R;

            reducedOverlap = this->GetReducedOverlap
                                   (na, realShpericalHarmonicsA.GetL(), m,
                                    nb, realShpericalHarmonicsB.GetL(), alpha, beta);


            pre =  pow(2.0*orbitalExponentA, na+0.5);
            pre *= pow(2.0*orbitalExponentB, nb+0.5);
            double factorials = Factorial(2*na)*Factorial(2*nb);
            pre /= sqrt(factorials);
            pre *= pow(R/2.0, na+nb+1.0);

            diatomicOverlap[valenceOrbitalA][valenceOrbitalB] = pre*reducedOverlap;
         }
         
      }
   }

   /*
   for(int i=0;i<OrbitalType_end;i++){
      for(int j=0;j<OrbitalType_end;j++){
         printf("diatomicOverlap[%d][%d]=%lf\n",i,j,diatomicOverlap[i][j]);
      }
   }
   */
}

// First derivative of (B.40) in J. A. Pople book.
void Cndo2::CalcDiatomicOverlapFirstDerivativeInDiatomicFrame(
                                                double** diatomicOverlapDeri, 
                                                Atom* atomA, Atom* atomB){

   int na = atomA->GetValenceShellType() + 1;
   int nb = atomB->GetValenceShellType() + 1;
   int m = 0;
   double alpha = 0.0;
   double beta = 0.0;
   double pre = 0.0;
   double reducedOverlap = 0.0;
   double reducedOverlapFirstDerivAlpha = 0.0;
   double reducedOverlapFirstDerivBeta = 0.0;
   double orbitalExponentA = 0.0;
   double orbitalExponentB = 0.0;
   double R = 0.0; // Inter nuclear distance between aton A and B.
   double temp1=0.0;
   double temp2=0.0;


   MallocerFreer::GetInstance()->InitializeDoubleMatrix2d
                                 (diatomicOverlapDeri, OrbitalType_end, OrbitalType_end);
   R = sqrt( 
            pow( atomA->GetXyz()[0] - atomB->GetXyz()[0], 2.0)
           +pow( atomA->GetXyz()[1] - atomB->GetXyz()[1], 2.0)
           +pow( atomA->GetXyz()[2] - atomB->GetXyz()[2], 2.0)
           );

   for(int a=0; a<atomA->GetValence().size(); a++){
      OrbitalType valenceOrbitalA = atomA->GetValence()[a];
      RealSphericalHarmonicsIndex realShpericalHarmonicsA(valenceOrbitalA);
      orbitalExponentA = atomA->GetOrbitalExponent
                                (atomA->GetValenceShellType(), valenceOrbitalA);

      for(int b=0; b<atomB->GetValence().size(); b++){
         OrbitalType valenceOrbitalB = atomB->GetValence()[b];
         RealSphericalHarmonicsIndex realShpericalHarmonicsB(valenceOrbitalB);
         orbitalExponentB = atomB->GetOrbitalExponent
                                   (atomB->GetValenceShellType(), valenceOrbitalB);

         if(realShpericalHarmonicsA.GetM() == realShpericalHarmonicsB.GetM()){
            m = abs(realShpericalHarmonicsA.GetM());
            alpha = orbitalExponentA * R;
            beta =  orbitalExponentB * R;

            reducedOverlap = this->GetReducedOverlap
                                   (na, realShpericalHarmonicsA.GetL(), m,
                                    nb, realShpericalHarmonicsB.GetL(), alpha, beta);
            reducedOverlapFirstDerivAlpha = this->GetReducedOverlapFirstDerivativeAlpha
                                             (na, realShpericalHarmonicsA.GetL(), m,
                                              nb, realShpericalHarmonicsB.GetL(), alpha, beta);
            reducedOverlapFirstDerivBeta  = this->GetReducedOverlapFirstDerivativeBeta
                                             (na, realShpericalHarmonicsA.GetL(), m,
                                              nb, realShpericalHarmonicsB.GetL(), alpha, beta);

            temp1 = ((double)(na+nb+1))*pow(R,na+nb)*reducedOverlap;
            temp2 = pow(R,na+nb+1)*(orbitalExponentA*reducedOverlapFirstDerivAlpha
                                   +orbitalExponentB*reducedOverlapFirstDerivBeta);

            pre =  pow(2.0*orbitalExponentA, na+0.5);
            pre *= pow(2.0*orbitalExponentB, nb+0.5);
            double factorials = Factorial(2*na)*Factorial(2*nb);
            pre /= sqrt(factorials);
            pre /= pow(2.0, na+nb+1.0);

            diatomicOverlapDeri[valenceOrbitalA][valenceOrbitalB] = pre*(temp1+temp2);
         }
         
      }
   }

   /*
   for(int i=0;i<OrbitalType_end;i++){
      for(int j=0;j<OrbitalType_end;j++){
         printf("diatomicOverlap[%d][%d]=%lf\n",i,j,diatomicOverlap[i][j]);
      }
   }
   */


}

// see (B.63) in Pople book.
void Cndo2::RotateDiatmicOverlapToSpaceFrame(double** diatomicOverlap, double** rotatingMatrix){
   double** oldDiatomicOverlap = MallocerFreer::GetInstance()->MallocDoubleMatrix2d
                                 (OrbitalType_end, OrbitalType_end);

   for(int i=0; i<OrbitalType_end; i++){
      for(int j=0; j<OrbitalType_end; j++){
         oldDiatomicOverlap[i][j] = diatomicOverlap[i][j];
      }
   }
   
   // rotate
   for(int i=0; i<OrbitalType_end; i++){
      for(int j=0; j<OrbitalType_end; j++){
         diatomicOverlap[i][j] = 0.0;

         for(int k=0; k<OrbitalType_end; k++){
            for(int l=0; l<OrbitalType_end; l++){
               diatomicOverlap[i][j] += oldDiatomicOverlap[k][l] 
                                       *rotatingMatrix[i][k] 
                                       *rotatingMatrix[j][l];
            }
         }
                                       
      }
   }


   if(oldDiatomicOverlap != NULL){
      MallocerFreer::GetInstance()->FreeDoubleMatrix2d(&oldDiatomicOverlap, OrbitalType_end);
   }

   /*
   for(int i=0;i<OrbitalType_end;i++){
      for(int j=0;j<OrbitalType_end;j++){
         printf("rotateddiatomicOverlap[%d][%d]=%lf\n",i,j,diatomicOverlap[i][j]);
         printf("rotating[%d][%d]=%lf\n",i,j,rotatingMatrix[i][j]);
      }
   }
   */

}

void Cndo2::SetOverlapElement(double** overlap, double** diatomicOverlap, Atom* atomA, Atom* atomB){

   int firstAOIndexAtomA = atomA->GetFirstAOIndex();
   int firstAOIndexAtomB = atomB->GetFirstAOIndex();
   OrbitalType orbitalA;
   OrbitalType orbitalB;
   int mu=0;
   int nu=0;

   for(int i=0; i<atomA->GetValence().size(); i++){
      orbitalA = atomA->GetValence()[i];
      for(int j=0; j<atomB->GetValence().size(); j++){
         orbitalB = atomB->GetValence()[j];
         mu = firstAOIndexAtomA + i;      
         nu = firstAOIndexAtomB + j;      
         overlap[mu][nu] = diatomicOverlap[orbitalA][orbitalB];
         overlap[nu][mu] = diatomicOverlap[orbitalA][orbitalB];
      }
   }

}

// see (B.24) in J. A. Pople book.
double Cndo2::GetReducedOverlap(int na, int la, int m, int nb, int lb, double alpha, double beta){
   double value = 0.0;
   double temp = 0.0;
   int I = 2*ShellType_end+1;
   int J = 2*ShellType_end+1;

   for(int i=0; i<I; i++){
      for(int j=0; j<J; j++){
         temp = this->Y[na][nb][la][lb][m][i][j];
         temp *= this->GetAuxiliaryA(i, 0.5*(alpha+beta));
         temp *= this->GetAuxiliaryB(j, 0.5*(alpha-beta));
         value += temp;
      }
   }
   value *= this->GetAuxiliaryD(la, lb, m);

   return value;
}

// see (B.30) in J. A. Pople book.
double Cndo2::GetReducedOverlap(int na, int nb, double alpha, double beta){
   double value = 0.0;
   double temp = 0.0;

   for(int k=0; k<=na+nb; k++){
      temp = this->Z[na][nb][k];
      temp *= this->GetAuxiliaryA(k, 0.5*(alpha+beta));
      temp *= this->GetAuxiliaryB(na+nb-k, 0.5*(alpha-beta));
      value += temp;
   }
   value *= 0.5;
   return value;
}

// First derivative of (B.24) in J. A. Pople book.
// This derivative is carried out by alpha.
double Cndo2::GetReducedOverlapFirstDerivativeAlpha
              (int na, int la, int m, int nb, int lb, double alpha, double beta){
   double value = 0.0;
   double temp1 = 0.0;
   double temp2 = 0.0;
   int I = 2*ShellType_end+1;
   int J = 2*ShellType_end+1;

   for(int i=0; i<I; i++){
      for(int j=0; j<J; j++){
         temp1 = this->GetAuxiliaryAFirstDerivative(i, 0.5*(alpha+beta))
                *this->GetAuxiliaryB(j, 0.5*(alpha-beta));
         temp2 = this->GetAuxiliaryA(i, 0.5*(alpha+beta))
                *this->GetAuxiliaryBFirstDerivative(j, 0.5*(alpha-beta));
         value += this->Y[na][nb][la][lb][m][i][j]*(temp1 + temp2);
      }
   }
   value *= 0.5*this->GetAuxiliaryD(la, lb, m);

   return value;
}

// First derivative of (B.24) in J. A. Pople book.
// This derivative is carried out by Beta.
double Cndo2::GetReducedOverlapFirstDerivativeBeta
              (int na, int la, int m, int nb, int lb, double alpha, double beta){
   double value = 0.0;
   double temp1 = 0.0;
   double temp2 = 0.0;
   int I = 2*ShellType_end+1;
   int J = 2*ShellType_end+1;

   for(int i=0; i<I; i++){
      for(int j=0; j<J; j++){
         temp1 = this->GetAuxiliaryAFirstDerivative(i, 0.5*(alpha+beta))
                *this->GetAuxiliaryB(j, 0.5*(alpha-beta));
         temp2 = this->GetAuxiliaryA(i, 0.5*(alpha+beta))
                *this->GetAuxiliaryBFirstDerivative(j, 0.5*(alpha-beta));
         value += this->Y[na][nb][la][lb][m][i][j]*(temp1 - temp2);
      }
   }
   value *= 0.5*this->GetAuxiliaryD(la, lb, m);

   return value;
}

// see (B.22) in J. A. Pople book.
double Cndo2::GetAuxiliaryA(int k, double rho){
   double value = 0.0;
   double temp = 0.0;

   value = exp(-1.0*rho)*(double)Factorial(k);
   for(int mu=1; mu<=k+1; mu++){
      temp += pow(rho,-1.0*mu)/(double)Factorial(k-mu+1);
   }
   value *= temp;

   return value;
}

// First derivative of (B.22) in J. A. Pople book.
double Cndo2::GetAuxiliaryAFirstDerivative(int k, double rho){
   return -1.0*this->GetAuxiliaryA(k+1, rho);
}

// see (B.23) in J. A. Pople book.
double Cndo2::GetAuxiliaryB(int k, double rho){
   double value = 0.0;
   double pre1 = 0.0;
   double pre2 = 0.0;
   double temp1 = 0.0;
   double temp2 = 0.0;

   if(fabs(rho)>0){
      pre1 = -1.0*exp(-1.0*rho);
      pre2 = -1.0*exp(rho);
      
      for(int mu=1; mu<=k+1; mu++){
         temp1 += pow(rho,-1.0*mu)  *(double)(Factorial(k)/Factorial(k-mu+1)) ;
         temp2 += pow(rho,-1.0*mu)  *(double)(Factorial(k)/Factorial(k-mu+1)) *pow(-1.0,k-mu);
      }
      value = pre1*temp1 + pre2*temp2;
   }
   else{
      if(k%2 == 0){
         value = 2.0/(1.0+(double)k);
      }
      else{
         value = 0;
      }
   }

   return value;
}

// First derivative of (B.23) in J. A. Pople book.
double Cndo2::GetAuxiliaryBFirstDerivative(int k, double rho){
   return -1.0*this->GetAuxiliaryB(k+1, rho);
}

// see (B.16) in J. A. Pople book.
double Cndo2::GetAuxiliaryD(int la, int lb, int m){
   string errorMessageAuxiliaryDNegativeM = "Error in cndo::Cndo2::GetAuxiliaryD: m<0\n";
   double value = 0.0;

   if(m<0){
      stringstream ss;
      ss << errorMessageAuxiliaryDNegativeM;
      throw MolDSException(ss.str());
   }

   double pre = pow(Factorial(m+1)/8.0, 2.0);
   double termA = ( (2.0*la+1.0)*Factorial(la-m) ) / ( 2.0*Factorial(la+m) );
   double termB = ( (2.0*lb+1.0)*Factorial(lb-m) ) / ( 2.0*Factorial(lb+m) );
   value = pre*sqrt(termA)*sqrt(termB);
   //printf("pre=%lf, termA=%lf, termB=%lf\n",pre,termA,termB);
   
   return value;
}

// These parameters are calculated with {$MolDS_TOP}/tools/paramYZ 
const double Cndo2::Z[2*ShellType_end][2*ShellType_end][4*ShellType_end-1] = {
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	3.000000, 
	-3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-4.000000, 
	6.000000, 
	-4.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	5.000000, 
	-10.000000, 
	10.000000, 
	-5.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-1.000000, 
	-1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	2.000000, 
	0.000000, 
	-2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-3.000000, 
	2.000000, 
	2.000000, 
	-3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	4.000000, 
	-5.000000, 
	0.000000, 
	5.000000, 
	-4.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-1.000000, 
	1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	-2.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	1.000000, 
	2.000000, 
	-2.000000, 
	-1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-2.000000, 
	-1.000000, 
	4.000000, 
	-1.000000, 
	-2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	3.000000, 
	-1.000000, 
	-5.000000, 
	5.000000, 
	1.000000, 
	-3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	3.000000, 
	3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-2.000000, 
	0.000000, 
	2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	1.000000, 
	-2.000000, 
	-2.000000, 
	1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	0.000000, 
	3.000000, 
	0.000000, 
	-3.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	-1.000000, 
	-3.000000, 
	3.000000, 
	3.000000, 
	-3.000000, 
	-1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	2.000000, 
	2.000000, 
	-6.000000, 
	0.000000, 
	6.000000, 
	-2.000000, 
	-2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	4.000000, 
	6.000000, 
	4.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-3.000000, 
	-2.000000, 
	2.000000, 
	3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	2.000000, 
	-1.000000, 
	-4.000000, 
	-1.000000, 
	2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-1.000000, 
	3.000000, 
	3.000000, 
	-3.000000, 
	-3.000000, 
	1.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	-4.000000, 
	0.000000, 
	6.000000, 
	0.000000, 
	-4.000000, 
	0.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	1.000000, 
	4.000000, 
	-4.000000, 
	-6.000000, 
	6.000000, 
	4.000000, 
	-4.000000, 
	-1.000000, 
	1.000000, 
	0.000000, 
	1.000000, 
	5.000000, 
	10.000000, 
	10.000000, 
	5.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-4.000000, 
	-5.000000, 
	0.000000, 
	5.000000, 
	4.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	3.000000, 
	1.000000, 
	-5.000000, 
	-5.000000, 
	1.000000, 
	3.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-1.000000, 
	-2.000000, 
	2.000000, 
	6.000000, 
	0.000000, 
	-6.000000, 
	-2.000000, 
	2.000000, 
	1.000000, 
	0.000000, 
	0.000000, 
	1.000000, 
	1.000000, 
	-4.000000, 
	-4.000000, 
	6.000000, 
	6.000000, 
	-4.000000, 
	-4.000000, 
	1.000000, 
	1.000000, 
	0.000000, 
	-1.000000, 
	0.000000, 
	5.000000, 
	0.000000, 
	-10.000000, 
	0.000000, 
	10.000000, 
	0.000000, 
	-5.000000, 
	0.000000, 
	1.000000, 
};




// These parameters are calculated with {$MolDS_TOP}/tools/paramYZ 
const double Cndo2::Y[ShellType_end+1][ShellType_end+1][ShellType_end][ShellType_end][ShellType_end][2*ShellType_end+1][2*ShellType_end+1] = {
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-160.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-160.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	80.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	80.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-160.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	160.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	80.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-80.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-320.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-320.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	160.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-160.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	-224.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-288.000000, 
	0.000000, 
	512.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-512.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	224.000000, 
	0.000000, 
	-288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	-224.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	-512.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-512.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-224.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	160.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	160.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-128.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	288.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-288.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	192.000000, 
	0.000000, 
	-192.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-64.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	64.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	96.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-96.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	144.000000, 
	0.000000, 
	-144.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-48.000000, 
	0.000000, 
	32.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	48.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	-16.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	-32.000000, 
	0.000000, 
	16.000000, 
	0.000000, 
	0.000000, 
};


}
#endif



